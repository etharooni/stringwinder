
stringwinder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000d6a  00000dfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800124  00800124  00000e22  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000183  00000000  00000000  00000e42  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000678  00000000  00000000  00000fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000248  00000000  00000000  0000163d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000590  00000000  00000000  00001885  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00001e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039e  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000360  00000000  00000000  00002306  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002666  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_11>
  30:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_12>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_14>
  3c:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_15>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__fp_negdi>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	ea e6       	ldi	r30, 0x6A	; 106
  9a:	fd e0       	ldi	r31, 0x0D	; 13
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <.do_copy_data_start>

0000009e <.do_copy_data_loop>:
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0

000000a2 <.do_copy_data_start>:
  a2:	a4 32       	cpi	r26, 0x24	; 36
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <.do_copy_data_loop>

000000a8 <__do_clear_bss>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a4 e2       	ldi	r26, 0x24	; 36
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a4 33       	cpi	r26, 0x34	; 52
  b4:	b1 07       	cpc	r27, r17
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 32 03 	call	0x664	; 0x664 <main>
  bc:	0c 94 b3 06 	jmp	0xd66	; 0xd66 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <_Z4angVd>:
	}else{
		return 0.0;
	}
}

double angV(double rpm){
  c4:	9b 01       	movw	r18, r22
  c6:	ac 01       	movw	r20, r24
  c8:	0e 94 76 03 	call	0x6ec	; 0x6ec <__addsf3>
  cc:	2b ed       	ldi	r18, 0xDB	; 219
  ce:	3f e0       	ldi	r19, 0x0F	; 15
  d0:	49 e4       	ldi	r20, 0x49	; 73
  d2:	50 e4       	ldi	r21, 0x40	; 64
  d4:	0e 94 7e 05 	call	0xafc	; 0xafc <__mulsf3>
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	40 e7       	ldi	r20, 0x70	; 112
  de:	52 e4       	ldi	r21, 0x42	; 66
  e0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
	return (rpm*2.0*M_PI)/60.0;
}
  e4:	08 95       	ret

000000e6 <_Z13setSpindleRPMd>:

void setSpindleRPM(double rpm){
  e6:	9b 01       	movw	r18, r22
  e8:	ac 01       	movw	r20, r24
	int compareValue = (int)(60.0*F_CPU/prescale_s/microstep_s/stepsperrot_s/rpm);
	OCR0B = compareValue;
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	7c e7       	ldi	r23, 0x7C	; 124
  ee:	82 e1       	ldi	r24, 0x12	; 18
  f0:	96 e4       	ldi	r25, 0x46	; 70
  f2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
  f6:	0e 94 49 04 	call	0x892	; 0x892 <__fixsfsi>
  fa:	68 bd       	out	0x28, r22	; 40
}
  fc:	08 95       	ret

000000fe <_Z14setCarriageRPMd>:

void setCarriageRPM(double rpm){
  fe:	9b 01       	movw	r18, r22
 100:	ac 01       	movw	r20, r24
	int compareValue = (int)(60.0*F_CPU/prescale_c/microstep_c/stepsperrot_c/rpm);
	OCR1B = compareValue;
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	7c e7       	ldi	r23, 0x7C	; 124
 106:	82 e1       	ldi	r24, 0x12	; 18
 108:	96 e4       	ldi	r25, 0x46	; 70
 10a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 10e:	0e 94 49 04 	call	0x892	; 0x892 <__fixsfsi>
 112:	70 93 8b 00 	sts	0x008B, r23
 116:	60 93 8a 00 	sts	0x008A, r22
}
 11a:	08 95       	ret

0000011c <_Z19setCarriageVelocityd>:

void setCarriageVelocity(double metersPerSecond){
 11c:	9b 01       	movw	r18, r22
 11e:	ac 01       	movw	r20, r24
	int compareValue = (int)((double)F_CPU/prescale_c/microstep_c/stepsperrot_c/rotpermeter_c/metersPerSecond);
	OCR1B = compareValue;
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	88 e4       	ldi	r24, 0x48	; 72
 126:	9f e3       	ldi	r25, 0x3F	; 63
 128:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 12c:	0e 94 49 04 	call	0x892	; 0x892 <__fixsfsi>
 130:	70 93 8b 00 	sts	0x008B, r23
 134:	60 93 8a 00 	sts	0x008A, r22
}
 138:	08 95       	ret

0000013a <_Z19getCarriageDistancev>:

double getCarriageDistance(){
 13a:	20 91 2c 01 	lds	r18, 0x012C
 13e:	30 91 2d 01 	lds	r19, 0x012D
 142:	40 91 2e 01 	lds	r20, 0x012E
 146:	50 91 2f 01 	lds	r21, 0x012F
 14a:	60 91 30 01 	lds	r22, 0x0130
 14e:	70 91 31 01 	lds	r23, 0x0131
 152:	80 91 32 01 	lds	r24, 0x0132
 156:	90 91 33 01 	lds	r25, 0x0133
 15a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__floatdisf>
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	48 e4       	ldi	r20, 0x48	; 72
 164:	53 e4       	ldi	r21, 0x43	; 67
 166:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	5e e3       	ldi	r21, 0x3E	; 62
 172:	0e 94 7e 05 	call	0xafc	; 0xafc <__mulsf3>
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	48 e4       	ldi	r20, 0x48	; 72
 17c:	53 e4       	ldi	r21, 0x43	; 67
 17e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
	return (double)steps_carriage/stepsperrot_c/microstep_c/rotpermeter_c;
}
 182:	08 95       	ret

00000184 <__vector_14>:
     |/| |/| |
comp B A B A B
step --__--__-
*/

ISR(TIMER0_COMPA_vect){
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	1f 93       	push	r17
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
	PORTB &= ~(1 << spindleStepPin); //turn off step pin
 1a8:	2b 98       	cbi	0x05, 3	; 5
	steps_spindle++;
 1aa:	80 91 24 01 	lds	r24, 0x0124
 1ae:	20 91 25 01 	lds	r18, 0x0125
 1b2:	30 91 26 01 	lds	r19, 0x0126
 1b6:	40 91 27 01 	lds	r20, 0x0127
 1ba:	60 91 28 01 	lds	r22, 0x0128
 1be:	e0 91 29 01 	lds	r30, 0x0129
 1c2:	a0 91 2a 01 	lds	r26, 0x012A
 1c6:	10 91 2b 01 	lds	r17, 0x012B
 1ca:	b8 2f       	mov	r27, r24
 1cc:	bf 5f       	subi	r27, 0xFF	; 255
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	b8 17       	cp	r27, r24
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <__vector_14+0x52>
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	f9 2f       	mov	r31, r25
 1d8:	f2 0f       	add	r31, r18
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	f2 17       	cp	r31, r18
 1de:	08 f0       	brcs	.+2      	; 0x1e2 <__vector_14+0x5e>
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	78 2f       	mov	r23, r24
 1e4:	73 0f       	add	r23, r19
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	73 17       	cp	r23, r19
 1ea:	08 f0       	brcs	.+2      	; 0x1ee <__vector_14+0x6a>
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	58 2f       	mov	r21, r24
 1f0:	54 0f       	add	r21, r20
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	54 17       	cp	r21, r20
 1f6:	08 f0       	brcs	.+2      	; 0x1fa <__vector_14+0x76>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	38 2f       	mov	r19, r24
 1fc:	36 0f       	add	r19, r22
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	36 17       	cp	r19, r22
 202:	08 f0       	brcs	.+2      	; 0x206 <__vector_14+0x82>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	28 2f       	mov	r18, r24
 208:	2e 0f       	add	r18, r30
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	2e 17       	cp	r18, r30
 20e:	08 f0       	brcs	.+2      	; 0x212 <__vector_14+0x8e>
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	98 2f       	mov	r25, r24
 214:	9a 0f       	add	r25, r26
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	9a 17       	cp	r25, r26
 21a:	08 f0       	brcs	.+2      	; 0x21e <__vector_14+0x9a>
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	81 0f       	add	r24, r17
 220:	b0 93 24 01 	sts	0x0124, r27
 224:	f0 93 25 01 	sts	0x0125, r31
 228:	70 93 26 01 	sts	0x0126, r23
 22c:	50 93 27 01 	sts	0x0127, r21
 230:	30 93 28 01 	sts	0x0128, r19
 234:	20 93 29 01 	sts	0x0129, r18
 238:	90 93 2a 01 	sts	0x012A, r25
 23c:	80 93 2b 01 	sts	0x012B, r24
}
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	1f 91       	pop	r17
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	1f 93       	push	r17
 270:	2f 93       	push	r18
 272:	3f 93       	push	r19
 274:	4f 93       	push	r20
 276:	5f 93       	push	r21
 278:	6f 93       	push	r22
 27a:	7f 93       	push	r23
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	af 93       	push	r26
 282:	bf 93       	push	r27
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
	PORTB &= ~(1 << carriageStepPin);
 288:	2c 98       	cbi	0x05, 4	; 5
	steps_carriage++;
 28a:	80 91 2c 01 	lds	r24, 0x012C
 28e:	20 91 2d 01 	lds	r18, 0x012D
 292:	30 91 2e 01 	lds	r19, 0x012E
 296:	40 91 2f 01 	lds	r20, 0x012F
 29a:	60 91 30 01 	lds	r22, 0x0130
 29e:	e0 91 31 01 	lds	r30, 0x0131
 2a2:	a0 91 32 01 	lds	r26, 0x0132
 2a6:	10 91 33 01 	lds	r17, 0x0133
 2aa:	b8 2f       	mov	r27, r24
 2ac:	bf 5f       	subi	r27, 0xFF	; 255
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	b8 17       	cp	r27, r24
 2b2:	08 f0       	brcs	.+2      	; 0x2b6 <__vector_11+0x52>
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	f9 2f       	mov	r31, r25
 2b8:	f2 0f       	add	r31, r18
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	f2 17       	cp	r31, r18
 2be:	08 f0       	brcs	.+2      	; 0x2c2 <__vector_11+0x5e>
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	78 2f       	mov	r23, r24
 2c4:	73 0f       	add	r23, r19
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	73 17       	cp	r23, r19
 2ca:	08 f0       	brcs	.+2      	; 0x2ce <__vector_11+0x6a>
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	58 2f       	mov	r21, r24
 2d0:	54 0f       	add	r21, r20
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	54 17       	cp	r21, r20
 2d6:	08 f0       	brcs	.+2      	; 0x2da <__vector_11+0x76>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	38 2f       	mov	r19, r24
 2dc:	36 0f       	add	r19, r22
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	36 17       	cp	r19, r22
 2e2:	08 f0       	brcs	.+2      	; 0x2e6 <__vector_11+0x82>
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	28 2f       	mov	r18, r24
 2e8:	2e 0f       	add	r18, r30
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	2e 17       	cp	r18, r30
 2ee:	08 f0       	brcs	.+2      	; 0x2f2 <__vector_11+0x8e>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	98 2f       	mov	r25, r24
 2f4:	9a 0f       	add	r25, r26
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	9a 17       	cp	r25, r26
 2fa:	08 f0       	brcs	.+2      	; 0x2fe <__vector_11+0x9a>
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	81 0f       	add	r24, r17
 300:	b0 93 2c 01 	sts	0x012C, r27
 304:	f0 93 2d 01 	sts	0x012D, r31
 308:	70 93 2e 01 	sts	0x012E, r23
 30c:	50 93 2f 01 	sts	0x012F, r21
 310:	30 93 30 01 	sts	0x0130, r19
 314:	20 93 31 01 	sts	0x0131, r18
 318:	90 93 32 01 	sts	0x0132, r25
 31c:	80 93 33 01 	sts	0x0133, r24
}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	7f 91       	pop	r23
 32e:	6f 91       	pop	r22
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	1f 91       	pop	r17
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <__vector_15>:

ISR(TIMER0_COMPB_vect){
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
	PORTB |= (1 << spindleStepPin); //turn on step pin
 34e:	2b 9a       	sbi	0x05, 3	; 5
	TCNT0 = 0;
 350:	16 bc       	out	0x26, r1	; 38
}
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <__vector_12>:

ISR(TIMER1_COMPB_vect){
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
	PORTB |= (1 << carriageStepPin);
 366:	2c 9a       	sbi	0x05, 4	; 5
	TCNT1 = 0;
 368:	10 92 85 00 	sts	0x0085, r1
 36c:	10 92 84 00 	sts	0x0084, r1
}
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <_Z10USART0Initv>:

void USART0Init(void){
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
 37a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)UBRR_VALUE;
 37e:	87 e6       	ldi	r24, 0x67	; 103
 380:	80 93 c4 00 	sts	0x00C4, r24
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 384:	e2 ec       	ldi	r30, 0xC2	; 194
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	86 60       	ori	r24, 0x06	; 6
 38c:	80 83       	st	Z, r24
	//enable transmission and reception
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 38e:	e1 ec       	ldi	r30, 0xC1	; 193
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	88 61       	ori	r24, 0x18	; 24
 396:	80 83       	st	Z, r24
}
 398:	08 95       	ret

0000039a <_Z14USART0SendByteh>:
void USART0SendByte(uint8_t u8Data){
 39a:	98 2f       	mov	r25, r24
	//wait while previous byte is completed
	while(!(UCSR0A&(1<<UDRE0))){};
 39c:	80 91 c0 00 	lds	r24, 0x00C0
 3a0:	85 ff       	sbrs	r24, 5
 3a2:	fc cf       	rjmp	.-8      	; 0x39c <_Z14USART0SendByteh+0x2>
	// Transmit data
	UDR0 = u8Data;
 3a4:	90 93 c6 00 	sts	0x00C6, r25
}
 3a8:	08 95       	ret

000003aa <_Z17USART0ReceiveBytev>:

uint8_t USART0ReceiveByte(){
	// Wait for byte to be received
	while(!(UCSR0A&(1<<RXC0))){};
 3aa:	80 91 c0 00 	lds	r24, 0x00C0
 3ae:	87 ff       	sbrs	r24, 7
 3b0:	fc cf       	rjmp	.-8      	; 0x3aa <_Z17USART0ReceiveBytev>
	// Return received data
	return UDR0;
 3b2:	80 91 c6 00 	lds	r24, 0x00C6
}
 3b6:	08 95       	ret

000003b8 <_Z5setupv>:
	itoa(number, snum, 10);
	USART0String(snum);
}

void setup(void){ 
	DDRB |= (1 << carriageStepPin)|(1 << spindleStepPin)|(1 << carriageDisablePin)|(1 << spindleDirPin)|(1 << carriageDirPin); // Set step pin as output
 3b8:	84 b1       	in	r24, 0x04	; 4
 3ba:	8f 61       	ori	r24, 0x1F	; 31
 3bc:	84 b9       	out	0x04, r24	; 4
	DDRD = 0; //set all pins as inputs
 3be:	1a b8       	out	0x0a, r1	; 10
	//PORTD = 0xFF;
	DDRD |= (1 << spindleDisablePin); //except for spindleDisable
 3c0:	53 9a       	sbi	0x0a, 3	; 10
	TCCR1B = 0b0011; //set the timer1 prescaler to 64 (bit 3 for CTC) <- p.137 of doc8161
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	80 93 81 00 	sts	0x0081, r24
	// 1 / ( (16000000/64) / (2^8) ) * 1000 = 1.024ms
	//         ^cpu   ^prescale ^bits = 976,562 hertz
	
	TCCR0B = 0b0011; //fcpu/64 - not a 16 bit timer - different prescale table
 3c8:	85 bd       	out	0x25, r24	; 37
	
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B); //enable compA, compB for timer2
 3ca:	ef e6       	ldi	r30, 0x6F	; 111
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	86 60       	ori	r24, 0x06	; 6
 3d2:	80 83       	st	Z, r24
	TIMSK0 |= (1 << OCIE0A)|(1<<OCIE0B); //compA, compB timer 0
 3d4:	ee e6       	ldi	r30, 0x6E	; 110
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	86 60       	ori	r24, 0x06	; 6
 3dc:	80 83       	st	Z, r24
	
	TCNT1 = 0; //reset and init counter
 3de:	10 92 85 00 	sts	0x0085, r1
 3e2:	10 92 84 00 	sts	0x0084, r1
	TCNT0 = 0;
 3e6:	16 bc       	out	0x26, r1	; 38
	
	int spindleStepCompare = (int)ceil(((double)F_CPU*steppulse_us)/(1000000.0*prescale_s)); //how long should we keep the step pin on every pulse?
	OCR0A = spindleStepCompare;
 3e8:	82 e3       	ldi	r24, 0x32	; 50
 3ea:	87 bd       	out	0x27, r24	; 39
	
	int carriageStepCompare = (int)ceil(((double)F_CPU*steppulse_us)/(1000000.0*prescale_c));
	OCR1A = carriageStepCompare;
 3ec:	82 e3       	ldi	r24, 0x32	; 50
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	90 93 89 00 	sts	0x0089, r25
 3f4:	80 93 88 00 	sts	0x0088, r24
	
	PORTB |= (1 << carriageDisablePin); //disable on start up
 3f8:	29 9a       	sbi	0x05, 1	; 5
	PORTD |= (1 << spindleDisablePin);
 3fa:	5b 9a       	sbi	0x0b, 3	; 11
	
	USART0Init();
 3fc:	0e 94 bd 01 	call	0x37a	; 0x37a <_Z10USART0Initv>
	
	//sei(); //  Enable global interrupts
	//F_CPU/prescale/OCR1A/stepsperrot/microstep/rotpermeter  = meter/sec
	//   steps/sec            |    rot/sec  |  meter/sec
}
 400:	08 95       	ret

00000402 <_Z10disableAllv>:

void disableAll(){
	cli();
 402:	f8 94       	cli
	PORTB |= (1 << carriageDisablePin);
 404:	29 9a       	sbi	0x05, 1	; 5
	PORTD |= (1 << spindleDisablePin);
 406:	5b 9a       	sbi	0x0b, 3	; 11
}
 408:	08 95       	ret

0000040a <_Z14rewindCarriagev>:

void rewindCarriage(){
	sei();
 40a:	78 94       	sei
	PORTD |= (1 << spindleDisablePin); //disable spindle
 40c:	5b 9a       	sbi	0x0b, 3	; 11
	PORTB &= ~(1 << carriageDisablePin);
 40e:	29 98       	cbi	0x05, 1	; 5
	PORTB |= (1 << carriageDirPin); //flip the direction
 410:	28 9a       	sbi	0x05, 0	; 5
	bool outsideLimit = false;
	bool closeLimit = false;
	bool blackButton = false;	
	bool redButton = false;
	int buttons;
	setCarriageRPM(maxrpm_c);
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	88 e4       	ldi	r24, 0x48	; 72
 418:	92 e4       	ldi	r25, 0x42	; 66
 41a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14setCarriageRPMd>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 41e:	20 e2       	ldi	r18, 0x20	; 32
 420:	3e e4       	ldi	r19, 0x4E	; 78
	while(!closeLimit && !redButton){
		buttons = PIND;
 422:	89 b1       	in	r24, 0x09	; 9
 424:	f9 01       	movw	r30, r18
 426:	31 97       	sbiw	r30, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <_Z14rewindCarriagev+0x1c>
	bool closeLimit = false;
	bool blackButton = false;	
	bool redButton = false;
	int buttons;
	setCarriageRPM(maxrpm_c);
	while(!closeLimit && !redButton){
 42a:	82 fd       	sbrc	r24, 2
 42c:	02 c0       	rjmp	.+4      	; 0x432 <_Z14rewindCarriagev+0x28>
 42e:	87 fd       	sbrc	r24, 7
 430:	f8 cf       	rjmp	.-16     	; 0x422 <_Z14rewindCarriagev+0x18>
 432:	08 95       	ret

00000434 <_Z12USART0StringPc>:
	while(!(UCSR0A&(1<<RXC0))){};
	// Return received data
	return UDR0;
}

void USART0String(char* blah){
 434:	ac 01       	movw	r20, r24
	int length = strlen(blah);
 436:	dc 01       	movw	r26, r24
 438:	0d 90       	ld	r0, X+
 43a:	00 20       	and	r0, r0
 43c:	e9 f7       	brne	.-6      	; 0x438 <_Z12USART0StringPc+0x4>
 43e:	11 97       	sbiw	r26, 0x01	; 1
 440:	a8 1b       	sub	r26, r24
 442:	b9 0b       	sbc	r27, r25
 444:	20 e0       	ldi	r18, 0x00	; 0
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	0c c0       	rjmp	.+24     	; 0x462 <_Z12USART0StringPc+0x2e>
	for(int i=0; i<length; i++){
		USART0SendByte(blah[i]);
 44a:	fa 01       	movw	r30, r20
 44c:	e2 0f       	add	r30, r18
 44e:	f3 1f       	adc	r31, r19
 450:	e0 81       	ld	r30, Z
	//enable transmission and reception
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
}
void USART0SendByte(uint8_t u8Data){
	//wait while previous byte is completed
	while(!(UCSR0A&(1<<UDRE0))){};
 452:	80 91 c0 00 	lds	r24, 0x00C0
 456:	85 ff       	sbrs	r24, 5
 458:	fc cf       	rjmp	.-8      	; 0x452 <_Z12USART0StringPc+0x1e>
	// Transmit data
	UDR0 = u8Data;
 45a:	e0 93 c6 00 	sts	0x00C6, r30
	return UDR0;
}

void USART0String(char* blah){
	int length = strlen(blah);
	for(int i=0; i<length; i++){
 45e:	2f 5f       	subi	r18, 0xFF	; 255
 460:	3f 4f       	sbci	r19, 0xFF	; 255
 462:	2a 17       	cp	r18, r26
 464:	3b 07       	cpc	r19, r27
 466:	8c f3       	brlt	.-30     	; 0x44a <_Z12USART0StringPc+0x16>
		USART0SendByte(blah[i]);
	}
}
 468:	08 95       	ret

0000046a <_Z12USART0Numberi>:

void USART0Number(int number){
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	df 93       	push	r29
 470:	cf 93       	push	r28
 472:	00 d0       	rcall	.+0      	; 0x474 <_Z12USART0Numberi+0xa>
 474:	00 d0       	rcall	.+0      	; 0x476 <_Z12USART0Numberi+0xc>
 476:	0f 92       	push	r0
 478:	cd b7       	in	r28, 0x3d	; 61
 47a:	de b7       	in	r29, 0x3e	; 62
	char snum[5];

	// convert 123 to string [buf]
	itoa(number, snum, 10);
 47c:	8e 01       	movw	r16, r28
 47e:	0f 5f       	subi	r16, 0xFF	; 255
 480:	1f 4f       	sbci	r17, 0xFF	; 255
 482:	b8 01       	movw	r22, r16
 484:	4a e0       	ldi	r20, 0x0A	; 10
 486:	50 e0       	ldi	r21, 0x00	; 0
 488:	0e 94 6e 06 	call	0xcdc	; 0xcdc <itoa>
	USART0String(snum);
 48c:	c8 01       	movw	r24, r16
 48e:	0e 94 1a 02 	call	0x434	; 0x434 <_Z12USART0StringPc>
}
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	0f 90       	pop	r0
 49a:	0f 90       	pop	r0
 49c:	cf 91       	pop	r28
 49e:	df 91       	pop	r29
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	08 95       	ret

000004a6 <_Z11newVelocitydd>:
#include <string.h>

long long steps_spindle = 0;
long long steps_carriage = 0;

double newVelocity(double meters, double angularVelocity){
 4a6:	af 92       	push	r10
 4a8:	bf 92       	push	r11
 4aa:	cf 92       	push	r12
 4ac:	df 92       	push	r13
 4ae:	ef 92       	push	r14
 4b0:	ff 92       	push	r15
 4b2:	0f 93       	push	r16
 4b4:	1f 93       	push	r17
 4b6:	59 01       	movw	r10, r18
 4b8:	6a 01       	movw	r12, r20
	double dtheta_dx=(((maxDensity*(1.0-b))/(1.0+b*cos((2.0*M_PI*meters)/l)))-lambda10)*(1.0/lambda20);
 4ba:	2b ed       	ldi	r18, 0xDB	; 219
 4bc:	3f e0       	ldi	r19, 0x0F	; 15
 4be:	49 ec       	ldi	r20, 0xC9	; 201
 4c0:	50 e4       	ldi	r21, 0x40	; 64
 4c2:	0e 94 7e 05 	call	0xafc	; 0xafc <__mulsf3>
 4c6:	20 e0       	ldi	r18, 0x00	; 0
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	40 e4       	ldi	r20, 0x40	; 64
 4cc:	5f e3       	ldi	r21, 0x3F	; 63
 4ce:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 4d2:	0e 94 de 03 	call	0x7bc	; 0x7bc <cos>
 4d6:	20 e0       	ldi	r18, 0x00	; 0
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	40 e8       	ldi	r20, 0x80	; 128
 4dc:	5e e3       	ldi	r21, 0x3E	; 62
 4de:	0e 94 7e 05 	call	0xafc	; 0xafc <__mulsf3>
 4e2:	20 e0       	ldi	r18, 0x00	; 0
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	40 e8       	ldi	r20, 0x80	; 128
 4e8:	5f e3       	ldi	r21, 0x3F	; 63
 4ea:	0e 94 76 03 	call	0x6ec	; 0x6ec <__addsf3>
 4ee:	9b 01       	movw	r18, r22
 4f0:	ac 01       	movw	r20, r24
 4f2:	6f eb       	ldi	r22, 0xBF	; 191
 4f4:	7e e0       	ldi	r23, 0x0E	; 14
 4f6:	8c e1       	ldi	r24, 0x1C	; 28
 4f8:	9c e3       	ldi	r25, 0x3C	; 60
 4fa:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 4fe:	23 ed       	ldi	r18, 0xD3	; 211
 500:	39 ed       	ldi	r19, 0xD9	; 217
 502:	49 ec       	ldi	r20, 0xC9	; 201
 504:	5a e3       	ldi	r21, 0x3A	; 58
 506:	0e 94 75 03 	call	0x6ea	; 0x6ea <__subsf3>
 50a:	2d e6       	ldi	r18, 0x6D	; 109
 50c:	3b ed       	ldi	r19, 0xDB	; 219
 50e:	4e e0       	ldi	r20, 0x0E	; 14
 510:	54 e4       	ldi	r21, 0x44	; 68
 512:	0e 94 7e 05 	call	0xafc	; 0xafc <__mulsf3>
 516:	9b 01       	movw	r18, r22
 518:	ac 01       	movw	r20, r24
	dtheta_dx = dtheta_dx*dtheta_dx-1.0;
 51a:	0e 94 7e 05 	call	0xafc	; 0xafc <__mulsf3>
	dtheta_dx = sqrt(dtheta_dx)/r;
 51e:	20 e0       	ldi	r18, 0x00	; 0
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	40 e8       	ldi	r20, 0x80	; 128
 524:	5f e3       	ldi	r21, 0x3F	; 63
 526:	0e 94 75 03 	call	0x6ea	; 0x6ea <__subsf3>
 52a:	0e 94 e5 05 	call	0xbca	; 0xbca <sqrt>
 52e:	2f e6       	ldi	r18, 0x6F	; 111
 530:	32 e1       	ldi	r19, 0x12	; 18
 532:	43 e0       	ldi	r20, 0x03	; 3
 534:	5a e3       	ldi	r21, 0x3A	; 58
 536:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 53a:	7b 01       	movw	r14, r22
 53c:	8c 01       	movw	r16, r24
	if (dtheta_dx > 0.0){
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__gesf2>
 54a:	18 16       	cp	r1, r24
 54c:	2c f0       	brlt	.+10     	; 0x558 <_Z11newVelocitydd+0xb2>
 54e:	e0 e0       	ldi	r30, 0x00	; 0
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	08 c0       	rjmp	.+16     	; 0x568 <_Z11newVelocitydd+0xc2>
		double velocity = angularVelocity/dtheta_dx;
 558:	c6 01       	movw	r24, r12
 55a:	b5 01       	movw	r22, r10
 55c:	a8 01       	movw	r20, r16
 55e:	97 01       	movw	r18, r14
 560:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 564:	e6 2f       	mov	r30, r22
 566:	69 2f       	mov	r22, r25
		return velocity;
	}else{
		return 0.0;
	}
}
 568:	2e 2f       	mov	r18, r30
 56a:	37 2f       	mov	r19, r23
 56c:	48 2f       	mov	r20, r24
 56e:	56 2f       	mov	r21, r22
 570:	b9 01       	movw	r22, r18
 572:	ca 01       	movw	r24, r20
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	ff 90       	pop	r15
 57a:	ef 90       	pop	r14
 57c:	df 90       	pop	r13
 57e:	cf 90       	pop	r12
 580:	bf 90       	pop	r11
 582:	af 90       	pop	r10
 584:	08 95       	ret

00000586 <_Z10windStringv>:
		redButton = (buttons & (1 << startButton))==0;
		_delay_ms(5);
	}
}

void windString(){
 586:	6f 92       	push	r6
 588:	7f 92       	push	r7
 58a:	8f 92       	push	r8
 58c:	9f 92       	push	r9
 58e:	af 92       	push	r10
 590:	bf 92       	push	r11
 592:	cf 92       	push	r12
 594:	df 92       	push	r13
 596:	ef 92       	push	r14
 598:	ff 92       	push	r15
 59a:	0f 93       	push	r16
 59c:	1f 93       	push	r17
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
	sei();
 5a2:	78 94       	sei
	double dtheta_dt = angV(maxrpm_s);
 5a4:	60 e0       	ldi	r22, 0x00	; 0
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	88 ec       	ldi	r24, 0xC8	; 200
 5aa:	92 e4       	ldi	r25, 0x42	; 66
 5ac:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z4angVd>
 5b0:	5b 01       	movw	r10, r22
 5b2:	6c 01       	movw	r12, r24
	setSpindleRPM(maxrpm_s);
 5b4:	60 e0       	ldi	r22, 0x00	; 0
 5b6:	70 e0       	ldi	r23, 0x00	; 0
 5b8:	88 ec       	ldi	r24, 0xC8	; 200
 5ba:	92 e4       	ldi	r25, 0x42	; 66
 5bc:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z13setSpindleRPMd>
	double meters = 0.0;
	double velocity = 0.0;
	PORTB &= ~(1 << carriageDisablePin); //enable the steppers
 5c0:	29 98       	cbi	0x05, 1	; 5
	PORTD &= ~(1 << spindleDisablePin);
 5c2:	5b 98       	cbi	0x0b, 3	; 11
	PORTB &= ~(1 << carriageDirPin); //set initial direction
 5c4:	28 98       	cbi	0x05, 0	; 5
	PORTB |= (1 << spindleDirPin);
 5c6:	2a 9a       	sbi	0x05, 2	; 5
 5c8:	0f 2e       	mov	r0, r31
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	ef 2e       	mov	r14, r31
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	ff 2e       	mov	r15, r31
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	0f 2f       	mov	r16, r31
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	1f 2f       	mov	r17, r31
 5da:	f0 2d       	mov	r31, r0
 5dc:	88 24       	eor	r8, r8
 5de:	99 24       	eor	r9, r9
 5e0:	40 e2       	ldi	r20, 0x20	; 32
 5e2:	64 2e       	mov	r6, r20
 5e4:	4e e4       	ldi	r20, 0x4E	; 78
 5e6:	74 2e       	mov	r7, r20
	while(meters < l && !outsideLimit && !blackButton){
		_delay_ms(5);
		buttons = PIND;
		outsideLimit = !(buttons & (1 << limitFar))==0;
		closeLimit = !(buttons & (1 << limitClose))==0;
		blackButton = (buttons & (1 << rewindButton))==0;
 5e8:	c1 e0       	ldi	r28, 0x01	; 1
 5ea:	d0 e0       	ldi	r29, 0x00	; 0
 5ec:	1e c0       	rjmp	.+60     	; 0x62a <_Z10windStringv+0xa4>
 5ee:	c3 01       	movw	r24, r6
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <_Z10windStringv+0x6a>
	bool blackButton = false;	
	bool redButton = false;
	int buttons;
	while(meters < l && !outsideLimit && !blackButton){
		_delay_ms(5);
		buttons = PIND;
 5f4:	89 b1       	in	r24, 0x09	; 9
 5f6:	90 e0       	ldi	r25, 0x00	; 0
		outsideLimit = !(buttons & (1 << limitFar))==0;
 5f8:	35 e0       	ldi	r19, 0x05	; 5
 5fa:	96 95       	lsr	r25
 5fc:	87 95       	ror	r24
 5fe:	3a 95       	dec	r19
 600:	e1 f7       	brne	.-8      	; 0x5fa <_Z10windStringv+0x74>
 602:	88 24       	eor	r8, r8
 604:	83 94       	inc	r8
 606:	88 22       	and	r8, r24
		closeLimit = !(buttons & (1 << limitClose))==0;
		blackButton = (buttons & (1 << rewindButton))==0;
 608:	96 95       	lsr	r25
 60a:	87 95       	ror	r24
 60c:	8c 27       	eor	r24, r28
 60e:	9d 27       	eor	r25, r29
 610:	99 24       	eor	r9, r9
 612:	93 94       	inc	r9
 614:	98 22       	and	r9, r24
		redButton = (buttons & (1 << startButton))==0;
		meters = getCarriageDistance();
 616:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z19getCarriageDistancev>
 61a:	7b 01       	movw	r14, r22
 61c:	8c 01       	movw	r16, r24
		velocity = newVelocity(meters, dtheta_dt);
 61e:	a6 01       	movw	r20, r12
 620:	95 01       	movw	r18, r10
 622:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_Z11newVelocitydd>
		setCarriageVelocity(velocity);
 626:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z19setCarriageVelocityd>
	bool outsideLimit = false;
	bool closeLimit = false;
	bool blackButton = false;	
	bool redButton = false;
	int buttons;
	while(meters < l && !outsideLimit && !blackButton){
 62a:	c8 01       	movw	r24, r16
 62c:	b7 01       	movw	r22, r14
 62e:	20 e0       	ldi	r18, 0x00	; 0
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	40 e4       	ldi	r20, 0x40	; 64
 634:	5f e3       	ldi	r21, 0x3F	; 63
 636:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__cmpsf2>
 63a:	88 23       	and	r24, r24
 63c:	24 f4       	brge	.+8      	; 0x646 <_Z10windStringv+0xc0>
 63e:	88 20       	and	r8, r8
 640:	11 f4       	brne	.+4      	; 0x646 <_Z10windStringv+0xc0>
 642:	99 20       	and	r9, r9
 644:	a1 f2       	breq	.-88     	; 0x5ee <_Z10windStringv+0x68>
		redButton = (buttons & (1 << startButton))==0;
		meters = getCarriageDistance();
		velocity = newVelocity(meters, dtheta_dt);
		setCarriageVelocity(velocity);
	}
}
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	1f 91       	pop	r17
 64c:	0f 91       	pop	r16
 64e:	ff 90       	pop	r15
 650:	ef 90       	pop	r14
 652:	df 90       	pop	r13
 654:	cf 90       	pop	r12
 656:	bf 90       	pop	r11
 658:	af 90       	pop	r10
 65a:	9f 90       	pop	r9
 65c:	8f 90       	pop	r8
 65e:	7f 90       	pop	r7
 660:	6f 90       	pop	r6
 662:	08 95       	ret

00000664 <main>:

int main (void){
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
	setup();
 668:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z5setupv>
	//F_CPU/prescale/OCR1A/stepsperrot/microstep/rotpermeter  = meter/sec
	//   steps/sec            |    rot/sec  |  meter/sec
}

void disableAll(){
	cli();
 66c:	f8 94       	cli
	PORTB |= (1 << carriageDisablePin);
 66e:	29 9a       	sbi	0x05, 1	; 5
	PORTD |= (1 << spindleDisablePin);
 670:	5b 9a       	sbi	0x0b, 3	; 11
	int buttons;
	bool outsideLimit = false;
	bool closeLimit = false;
	bool blackButton = false;	
	bool redButton = false;
	USART0String("hello!  ");
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	91 e0       	ldi	r25, 0x01	; 1
 676:	0e 94 1a 02 	call	0x434	; 0x434 <_Z12USART0StringPc>
 67a:	24 ef       	ldi	r18, 0xF4	; 244
 67c:	31 e0       	ldi	r19, 0x01	; 1
 67e:	c0 e9       	ldi	r28, 0x90	; 144
 680:	d1 e0       	ldi	r29, 0x01	; 1
 682:	09 c0       	rjmp	.+18     	; 0x696 <main+0x32>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 684:	ce 01       	movw	r24, r28
 686:	01 97       	sbiw	r24, 0x01	; 1
 688:	f1 f7       	brne	.-4      	; 0x686 <main+0x22>
 68a:	21 50       	subi	r18, 0x01	; 1
 68c:	30 40       	sbci	r19, 0x00	; 0
 68e:	03 c0       	rjmp	.+6      	; 0x696 <main+0x32>
 690:	24 ef       	ldi	r18, 0xF4	; 244
 692:	31 e0       	ldi	r19, 0x01	; 1
 694:	f7 cf       	rjmp	.-18     	; 0x684 <main+0x20>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 696:	21 15       	cp	r18, r1
 698:	31 05       	cpc	r19, r1
 69a:	a1 f7       	brne	.-24     	; 0x684 <main+0x20>
	while(1){
		_delay_ms(50);
		buttons = PIND;
 69c:	89 b1       	in	r24, 0x09	; 9
		outsideLimit = !(buttons & (1 << limitFar))==0;
		closeLimit = !(buttons & (1 << limitClose))==0;
		blackButton = (buttons & (1 << rewindButton))==0;
		redButton = (buttons & (1 << startButton))==0;
		if (blackButton){
 69e:	86 fd       	sbrc	r24, 6
 6a0:	11 c0       	rjmp	.+34     	; 0x6c4 <main+0x60>
			USART0String("rewinding.   ");
 6a2:	89 e0       	ldi	r24, 0x09	; 9
 6a4:	91 e0       	ldi	r25, 0x01	; 1
 6a6:	0e 94 1a 02 	call	0x434	; 0x434 <_Z12USART0StringPc>
			rewindCarriage();
 6aa:	0e 94 05 02 	call	0x40a	; 0x40a <_Z14rewindCarriagev>
	//F_CPU/prescale/OCR1A/stepsperrot/microstep/rotpermeter  = meter/sec
	//   steps/sec            |    rot/sec  |  meter/sec
}

void disableAll(){
	cli();
 6ae:	f8 94       	cli
	PORTB |= (1 << carriageDisablePin);
 6b0:	29 9a       	sbi	0x05, 1	; 5
	PORTD |= (1 << spindleDisablePin);
 6b2:	5b 9a       	sbi	0x0b, 3	; 11
 6b4:	88 e8       	ldi	r24, 0x88	; 136
 6b6:	93 e1       	ldi	r25, 0x13	; 19
 6b8:	fe 01       	movw	r30, r28
 6ba:	31 97       	sbiw	r30, 0x01	; 1
 6bc:	f1 f7       	brne	.-4      	; 0x6ba <main+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6c0:	d9 f7       	brne	.-10     	; 0x6b8 <main+0x54>
 6c2:	e6 cf       	rjmp	.-52     	; 0x690 <main+0x2c>
		if (blackButton){
			USART0String("rewinding.   ");
			rewindCarriage();
			disableAll();
			_delay_ms(500);
		}else if (redButton){
 6c4:	87 fd       	sbrc	r24, 7
 6c6:	e4 cf       	rjmp	.-56     	; 0x690 <main+0x2c>
			USART0String("winding.   ");
 6c8:	87 e1       	ldi	r24, 0x17	; 23
 6ca:	91 e0       	ldi	r25, 0x01	; 1
 6cc:	0e 94 1a 02 	call	0x434	; 0x434 <_Z12USART0StringPc>
			windString();
 6d0:	0e 94 c3 02 	call	0x586	; 0x586 <_Z10windStringv>
	//F_CPU/prescale/OCR1A/stepsperrot/microstep/rotpermeter  = meter/sec
	//   steps/sec            |    rot/sec  |  meter/sec
}

void disableAll(){
	cli();
 6d4:	f8 94       	cli
	PORTB |= (1 << carriageDisablePin);
 6d6:	29 9a       	sbi	0x05, 1	; 5
	PORTD |= (1 << spindleDisablePin);
 6d8:	5b 9a       	sbi	0x0b, 3	; 11
 6da:	88 e8       	ldi	r24, 0x88	; 136
 6dc:	93 e1       	ldi	r25, 0x13	; 19
 6de:	fe 01       	movw	r30, r28
 6e0:	31 97       	sbiw	r30, 0x01	; 1
 6e2:	f1 f7       	brne	.-4      	; 0x6e0 <main+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6e6:	d9 f7       	brne	.-10     	; 0x6de <main+0x7a>
 6e8:	d3 cf       	rjmp	.-90     	; 0x690 <main+0x2c>

000006ea <__subsf3>:
 6ea:	50 58       	subi	r21, 0x80	; 128

000006ec <__addsf3>:
 6ec:	bb 27       	eor	r27, r27
 6ee:	aa 27       	eor	r26, r26
 6f0:	0e d0       	rcall	.+28     	; 0x70e <__addsf3x>
 6f2:	b5 c1       	rjmp	.+874    	; 0xa5e <__fp_round>
 6f4:	7e d1       	rcall	.+764    	; 0x9f2 <__fp_pscA>
 6f6:	30 f0       	brcs	.+12     	; 0x704 <__addsf3+0x18>
 6f8:	83 d1       	rcall	.+774    	; 0xa00 <__fp_pscB>
 6fa:	20 f0       	brcs	.+8      	; 0x704 <__addsf3+0x18>
 6fc:	31 f4       	brne	.+12     	; 0x70a <__addsf3+0x1e>
 6fe:	9f 3f       	cpi	r25, 0xFF	; 255
 700:	11 f4       	brne	.+4      	; 0x706 <__addsf3+0x1a>
 702:	1e f4       	brtc	.+6      	; 0x70a <__addsf3+0x1e>
 704:	63 c1       	rjmp	.+710    	; 0x9cc <__fp_nan>
 706:	0e f4       	brtc	.+2      	; 0x70a <__addsf3+0x1e>
 708:	e0 95       	com	r30
 70a:	e7 fb       	bst	r30, 7
 70c:	59 c1       	rjmp	.+690    	; 0x9c0 <__fp_inf>

0000070e <__addsf3x>:
 70e:	e9 2f       	mov	r30, r25
 710:	c8 d1       	rcall	.+912    	; 0xaa2 <__fp_split3>
 712:	80 f3       	brcs	.-32     	; 0x6f4 <__addsf3+0x8>
 714:	ba 17       	cp	r27, r26
 716:	62 07       	cpc	r22, r18
 718:	73 07       	cpc	r23, r19
 71a:	84 07       	cpc	r24, r20
 71c:	95 07       	cpc	r25, r21
 71e:	18 f0       	brcs	.+6      	; 0x726 <__addsf3x+0x18>
 720:	71 f4       	brne	.+28     	; 0x73e <__addsf3x+0x30>
 722:	9e f5       	brtc	.+102    	; 0x78a <__addsf3x+0x7c>
 724:	e0 c1       	rjmp	.+960    	; 0xae6 <__fp_zero>
 726:	0e f4       	brtc	.+2      	; 0x72a <__addsf3x+0x1c>
 728:	e0 95       	com	r30
 72a:	0b 2e       	mov	r0, r27
 72c:	ba 2f       	mov	r27, r26
 72e:	a0 2d       	mov	r26, r0
 730:	0b 01       	movw	r0, r22
 732:	b9 01       	movw	r22, r18
 734:	90 01       	movw	r18, r0
 736:	0c 01       	movw	r0, r24
 738:	ca 01       	movw	r24, r20
 73a:	a0 01       	movw	r20, r0
 73c:	11 24       	eor	r1, r1
 73e:	ff 27       	eor	r31, r31
 740:	59 1b       	sub	r21, r25
 742:	99 f0       	breq	.+38     	; 0x76a <__addsf3x+0x5c>
 744:	59 3f       	cpi	r21, 0xF9	; 249
 746:	50 f4       	brcc	.+20     	; 0x75c <__addsf3x+0x4e>
 748:	50 3e       	cpi	r21, 0xE0	; 224
 74a:	68 f1       	brcs	.+90     	; 0x7a6 <__addsf3x+0x98>
 74c:	1a 16       	cp	r1, r26
 74e:	f0 40       	sbci	r31, 0x00	; 0
 750:	a2 2f       	mov	r26, r18
 752:	23 2f       	mov	r18, r19
 754:	34 2f       	mov	r19, r20
 756:	44 27       	eor	r20, r20
 758:	58 5f       	subi	r21, 0xF8	; 248
 75a:	f3 cf       	rjmp	.-26     	; 0x742 <__addsf3x+0x34>
 75c:	46 95       	lsr	r20
 75e:	37 95       	ror	r19
 760:	27 95       	ror	r18
 762:	a7 95       	ror	r26
 764:	f0 40       	sbci	r31, 0x00	; 0
 766:	53 95       	inc	r21
 768:	c9 f7       	brne	.-14     	; 0x75c <__addsf3x+0x4e>
 76a:	7e f4       	brtc	.+30     	; 0x78a <__addsf3x+0x7c>
 76c:	1f 16       	cp	r1, r31
 76e:	ba 0b       	sbc	r27, r26
 770:	62 0b       	sbc	r22, r18
 772:	73 0b       	sbc	r23, r19
 774:	84 0b       	sbc	r24, r20
 776:	ba f0       	brmi	.+46     	; 0x7a6 <__addsf3x+0x98>
 778:	91 50       	subi	r25, 0x01	; 1
 77a:	a1 f0       	breq	.+40     	; 0x7a4 <__addsf3x+0x96>
 77c:	ff 0f       	add	r31, r31
 77e:	bb 1f       	adc	r27, r27
 780:	66 1f       	adc	r22, r22
 782:	77 1f       	adc	r23, r23
 784:	88 1f       	adc	r24, r24
 786:	c2 f7       	brpl	.-16     	; 0x778 <__addsf3x+0x6a>
 788:	0e c0       	rjmp	.+28     	; 0x7a6 <__addsf3x+0x98>
 78a:	ba 0f       	add	r27, r26
 78c:	62 1f       	adc	r22, r18
 78e:	73 1f       	adc	r23, r19
 790:	84 1f       	adc	r24, r20
 792:	48 f4       	brcc	.+18     	; 0x7a6 <__addsf3x+0x98>
 794:	87 95       	ror	r24
 796:	77 95       	ror	r23
 798:	67 95       	ror	r22
 79a:	b7 95       	ror	r27
 79c:	f7 95       	ror	r31
 79e:	9e 3f       	cpi	r25, 0xFE	; 254
 7a0:	08 f0       	brcs	.+2      	; 0x7a4 <__addsf3x+0x96>
 7a2:	b3 cf       	rjmp	.-154    	; 0x70a <__addsf3+0x1e>
 7a4:	93 95       	inc	r25
 7a6:	88 0f       	add	r24, r24
 7a8:	08 f0       	brcs	.+2      	; 0x7ac <__addsf3x+0x9e>
 7aa:	99 27       	eor	r25, r25
 7ac:	ee 0f       	add	r30, r30
 7ae:	97 95       	ror	r25
 7b0:	87 95       	ror	r24
 7b2:	08 95       	ret

000007b4 <__cmpsf2>:
 7b4:	e1 d0       	rcall	.+450    	; 0x978 <__fp_cmp>
 7b6:	08 f4       	brcc	.+2      	; 0x7ba <__cmpsf2+0x6>
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	08 95       	ret

000007bc <cos>:
 7bc:	29 d1       	rcall	.+594    	; 0xa10 <__fp_rempio2>
 7be:	e3 95       	inc	r30
 7c0:	5f c1       	rjmp	.+702    	; 0xa80 <__fp_sinus>

000007c2 <__divsf3>:
 7c2:	0c d0       	rcall	.+24     	; 0x7dc <__divsf3x>
 7c4:	4c c1       	rjmp	.+664    	; 0xa5e <__fp_round>
 7c6:	1c d1       	rcall	.+568    	; 0xa00 <__fp_pscB>
 7c8:	40 f0       	brcs	.+16     	; 0x7da <__divsf3+0x18>
 7ca:	13 d1       	rcall	.+550    	; 0x9f2 <__fp_pscA>
 7cc:	30 f0       	brcs	.+12     	; 0x7da <__divsf3+0x18>
 7ce:	21 f4       	brne	.+8      	; 0x7d8 <__divsf3+0x16>
 7d0:	5f 3f       	cpi	r21, 0xFF	; 255
 7d2:	19 f0       	breq	.+6      	; 0x7da <__divsf3+0x18>
 7d4:	f5 c0       	rjmp	.+490    	; 0x9c0 <__fp_inf>
 7d6:	51 11       	cpse	r21, r1
 7d8:	87 c1       	rjmp	.+782    	; 0xae8 <__fp_szero>
 7da:	f8 c0       	rjmp	.+496    	; 0x9cc <__fp_nan>

000007dc <__divsf3x>:
 7dc:	62 d1       	rcall	.+708    	; 0xaa2 <__fp_split3>
 7de:	98 f3       	brcs	.-26     	; 0x7c6 <__divsf3+0x4>

000007e0 <__divsf3_pse>:
 7e0:	99 23       	and	r25, r25
 7e2:	c9 f3       	breq	.-14     	; 0x7d6 <__divsf3+0x14>
 7e4:	55 23       	and	r21, r21
 7e6:	b1 f3       	breq	.-20     	; 0x7d4 <__divsf3+0x12>
 7e8:	95 1b       	sub	r25, r21
 7ea:	55 0b       	sbc	r21, r21
 7ec:	bb 27       	eor	r27, r27
 7ee:	aa 27       	eor	r26, r26
 7f0:	62 17       	cp	r22, r18
 7f2:	73 07       	cpc	r23, r19
 7f4:	84 07       	cpc	r24, r20
 7f6:	38 f0       	brcs	.+14     	; 0x806 <__divsf3_pse+0x26>
 7f8:	9f 5f       	subi	r25, 0xFF	; 255
 7fa:	5f 4f       	sbci	r21, 0xFF	; 255
 7fc:	22 0f       	add	r18, r18
 7fe:	33 1f       	adc	r19, r19
 800:	44 1f       	adc	r20, r20
 802:	aa 1f       	adc	r26, r26
 804:	a9 f3       	breq	.-22     	; 0x7f0 <__divsf3_pse+0x10>
 806:	33 d0       	rcall	.+102    	; 0x86e <__divsf3_pse+0x8e>
 808:	0e 2e       	mov	r0, r30
 80a:	3a f0       	brmi	.+14     	; 0x81a <__divsf3_pse+0x3a>
 80c:	e0 e8       	ldi	r30, 0x80	; 128
 80e:	30 d0       	rcall	.+96     	; 0x870 <__divsf3_pse+0x90>
 810:	91 50       	subi	r25, 0x01	; 1
 812:	50 40       	sbci	r21, 0x00	; 0
 814:	e6 95       	lsr	r30
 816:	00 1c       	adc	r0, r0
 818:	ca f7       	brpl	.-14     	; 0x80c <__divsf3_pse+0x2c>
 81a:	29 d0       	rcall	.+82     	; 0x86e <__divsf3_pse+0x8e>
 81c:	fe 2f       	mov	r31, r30
 81e:	27 d0       	rcall	.+78     	; 0x86e <__divsf3_pse+0x8e>
 820:	66 0f       	add	r22, r22
 822:	77 1f       	adc	r23, r23
 824:	88 1f       	adc	r24, r24
 826:	bb 1f       	adc	r27, r27
 828:	26 17       	cp	r18, r22
 82a:	37 07       	cpc	r19, r23
 82c:	48 07       	cpc	r20, r24
 82e:	ab 07       	cpc	r26, r27
 830:	b0 e8       	ldi	r27, 0x80	; 128
 832:	09 f0       	breq	.+2      	; 0x836 <__divsf3_pse+0x56>
 834:	bb 0b       	sbc	r27, r27
 836:	80 2d       	mov	r24, r0
 838:	bf 01       	movw	r22, r30
 83a:	ff 27       	eor	r31, r31
 83c:	93 58       	subi	r25, 0x83	; 131
 83e:	5f 4f       	sbci	r21, 0xFF	; 255
 840:	2a f0       	brmi	.+10     	; 0x84c <__divsf3_pse+0x6c>
 842:	9e 3f       	cpi	r25, 0xFE	; 254
 844:	51 05       	cpc	r21, r1
 846:	68 f0       	brcs	.+26     	; 0x862 <__divsf3_pse+0x82>
 848:	bb c0       	rjmp	.+374    	; 0x9c0 <__fp_inf>
 84a:	4e c1       	rjmp	.+668    	; 0xae8 <__fp_szero>
 84c:	5f 3f       	cpi	r21, 0xFF	; 255
 84e:	ec f3       	brlt	.-6      	; 0x84a <__divsf3_pse+0x6a>
 850:	98 3e       	cpi	r25, 0xE8	; 232
 852:	dc f3       	brlt	.-10     	; 0x84a <__divsf3_pse+0x6a>
 854:	86 95       	lsr	r24
 856:	77 95       	ror	r23
 858:	67 95       	ror	r22
 85a:	b7 95       	ror	r27
 85c:	f7 95       	ror	r31
 85e:	9f 5f       	subi	r25, 0xFF	; 255
 860:	c9 f7       	brne	.-14     	; 0x854 <__divsf3_pse+0x74>
 862:	88 0f       	add	r24, r24
 864:	91 1d       	adc	r25, r1
 866:	96 95       	lsr	r25
 868:	87 95       	ror	r24
 86a:	97 f9       	bld	r25, 7
 86c:	08 95       	ret
 86e:	e1 e0       	ldi	r30, 0x01	; 1
 870:	66 0f       	add	r22, r22
 872:	77 1f       	adc	r23, r23
 874:	88 1f       	adc	r24, r24
 876:	bb 1f       	adc	r27, r27
 878:	62 17       	cp	r22, r18
 87a:	73 07       	cpc	r23, r19
 87c:	84 07       	cpc	r24, r20
 87e:	ba 07       	cpc	r27, r26
 880:	20 f0       	brcs	.+8      	; 0x88a <__divsf3_pse+0xaa>
 882:	62 1b       	sub	r22, r18
 884:	73 0b       	sbc	r23, r19
 886:	84 0b       	sbc	r24, r20
 888:	ba 0b       	sbc	r27, r26
 88a:	ee 1f       	adc	r30, r30
 88c:	88 f7       	brcc	.-30     	; 0x870 <__divsf3_pse+0x90>
 88e:	e0 95       	com	r30
 890:	08 95       	ret

00000892 <__fixsfsi>:
 892:	04 d0       	rcall	.+8      	; 0x89c <__fixunssfsi>
 894:	68 94       	set
 896:	b1 11       	cpse	r27, r1
 898:	27 c1       	rjmp	.+590    	; 0xae8 <__fp_szero>
 89a:	08 95       	ret

0000089c <__fixunssfsi>:
 89c:	0a d1       	rcall	.+532    	; 0xab2 <__fp_splitA>
 89e:	88 f0       	brcs	.+34     	; 0x8c2 <__fixunssfsi+0x26>
 8a0:	9f 57       	subi	r25, 0x7F	; 127
 8a2:	90 f0       	brcs	.+36     	; 0x8c8 <__fixunssfsi+0x2c>
 8a4:	b9 2f       	mov	r27, r25
 8a6:	99 27       	eor	r25, r25
 8a8:	b7 51       	subi	r27, 0x17	; 23
 8aa:	a0 f0       	brcs	.+40     	; 0x8d4 <__fixunssfsi+0x38>
 8ac:	d1 f0       	breq	.+52     	; 0x8e2 <__fixunssfsi+0x46>
 8ae:	66 0f       	add	r22, r22
 8b0:	77 1f       	adc	r23, r23
 8b2:	88 1f       	adc	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	1a f0       	brmi	.+6      	; 0x8be <__fixunssfsi+0x22>
 8b8:	ba 95       	dec	r27
 8ba:	c9 f7       	brne	.-14     	; 0x8ae <__fixunssfsi+0x12>
 8bc:	12 c0       	rjmp	.+36     	; 0x8e2 <__fixunssfsi+0x46>
 8be:	b1 30       	cpi	r27, 0x01	; 1
 8c0:	81 f0       	breq	.+32     	; 0x8e2 <__fixunssfsi+0x46>
 8c2:	11 d1       	rcall	.+546    	; 0xae6 <__fp_zero>
 8c4:	b1 e0       	ldi	r27, 0x01	; 1
 8c6:	08 95       	ret
 8c8:	0e c1       	rjmp	.+540    	; 0xae6 <__fp_zero>
 8ca:	67 2f       	mov	r22, r23
 8cc:	78 2f       	mov	r23, r24
 8ce:	88 27       	eor	r24, r24
 8d0:	b8 5f       	subi	r27, 0xF8	; 248
 8d2:	39 f0       	breq	.+14     	; 0x8e2 <__fixunssfsi+0x46>
 8d4:	b9 3f       	cpi	r27, 0xF9	; 249
 8d6:	cc f3       	brlt	.-14     	; 0x8ca <__fixunssfsi+0x2e>
 8d8:	86 95       	lsr	r24
 8da:	77 95       	ror	r23
 8dc:	67 95       	ror	r22
 8de:	b3 95       	inc	r27
 8e0:	d9 f7       	brne	.-10     	; 0x8d8 <__fixunssfsi+0x3c>
 8e2:	3e f4       	brtc	.+14     	; 0x8f2 <__fixunssfsi+0x56>
 8e4:	90 95       	com	r25
 8e6:	80 95       	com	r24
 8e8:	70 95       	com	r23
 8ea:	61 95       	neg	r22
 8ec:	7f 4f       	sbci	r23, 0xFF	; 255
 8ee:	8f 4f       	sbci	r24, 0xFF	; 255
 8f0:	9f 4f       	sbci	r25, 0xFF	; 255
 8f2:	08 95       	ret

000008f4 <__floatdisf>:
 8f4:	97 fb       	bst	r25, 7
 8f6:	0e f4       	brtc	.+2      	; 0x8fa <__floatdisf+0x6>
 8f8:	6c d0       	rcall	.+216    	; 0x9d2 <__fp_negdi>
 8fa:	01 c0       	rjmp	.+2      	; 0x8fe <__fp_di2sf>

000008fc <__floatundisf>:
 8fc:	e8 94       	clt

000008fe <__fp_di2sf>:
 8fe:	f9 2f       	mov	r31, r25
 900:	96 eb       	ldi	r25, 0xB6	; 182
 902:	ff 23       	and	r31, r31
 904:	81 f0       	breq	.+32     	; 0x926 <__stack+0x27>
 906:	12 16       	cp	r1, r18
 908:	13 06       	cpc	r1, r19
 90a:	14 06       	cpc	r1, r20
 90c:	44 0b       	sbc	r20, r20
 90e:	93 95       	inc	r25
 910:	f6 95       	lsr	r31
 912:	87 95       	ror	r24
 914:	77 95       	ror	r23
 916:	67 95       	ror	r22
 918:	57 95       	ror	r21
 91a:	40 40       	sbci	r20, 0x00	; 0
 91c:	ff 23       	and	r31, r31
 91e:	b9 f7       	brne	.-18     	; 0x90e <__stack+0xf>
 920:	1b c0       	rjmp	.+54     	; 0x958 <__stack+0x59>
 922:	99 27       	eor	r25, r25
 924:	08 95       	ret
 926:	88 23       	and	r24, r24
 928:	51 f4       	brne	.+20     	; 0x93e <__stack+0x3f>
 92a:	98 50       	subi	r25, 0x08	; 8
 92c:	d2 f7       	brpl	.-12     	; 0x922 <__stack+0x23>
 92e:	87 2b       	or	r24, r23
 930:	76 2f       	mov	r23, r22
 932:	65 2f       	mov	r22, r21
 934:	54 2f       	mov	r21, r20
 936:	43 2f       	mov	r20, r19
 938:	32 2f       	mov	r19, r18
 93a:	20 e0       	ldi	r18, 0x00	; 0
 93c:	b1 f3       	breq	.-20     	; 0x92a <__stack+0x2b>
 93e:	12 16       	cp	r1, r18
 940:	13 06       	cpc	r1, r19
 942:	14 06       	cpc	r1, r20
 944:	44 0b       	sbc	r20, r20
 946:	88 23       	and	r24, r24
 948:	3a f0       	brmi	.+14     	; 0x958 <__stack+0x59>
 94a:	9a 95       	dec	r25
 94c:	44 0f       	add	r20, r20
 94e:	55 1f       	adc	r21, r21
 950:	66 1f       	adc	r22, r22
 952:	77 1f       	adc	r23, r23
 954:	88 1f       	adc	r24, r24
 956:	ca f7       	brpl	.-14     	; 0x94a <__stack+0x4b>
 958:	55 23       	and	r21, r21
 95a:	4a f4       	brpl	.+18     	; 0x96e <__stack+0x6f>
 95c:	44 0f       	add	r20, r20
 95e:	55 1f       	adc	r21, r21
 960:	11 f4       	brne	.+4      	; 0x966 <__stack+0x67>
 962:	60 ff       	sbrs	r22, 0
 964:	04 c0       	rjmp	.+8      	; 0x96e <__stack+0x6f>
 966:	6f 5f       	subi	r22, 0xFF	; 255
 968:	7f 4f       	sbci	r23, 0xFF	; 255
 96a:	8f 4f       	sbci	r24, 0xFF	; 255
 96c:	9f 4f       	sbci	r25, 0xFF	; 255
 96e:	88 0f       	add	r24, r24
 970:	96 95       	lsr	r25
 972:	87 95       	ror	r24
 974:	97 f9       	bld	r25, 7
 976:	08 95       	ret

00000978 <__fp_cmp>:
 978:	99 0f       	add	r25, r25
 97a:	00 08       	sbc	r0, r0
 97c:	55 0f       	add	r21, r21
 97e:	aa 0b       	sbc	r26, r26
 980:	e0 e8       	ldi	r30, 0x80	; 128
 982:	fe ef       	ldi	r31, 0xFE	; 254
 984:	16 16       	cp	r1, r22
 986:	17 06       	cpc	r1, r23
 988:	e8 07       	cpc	r30, r24
 98a:	f9 07       	cpc	r31, r25
 98c:	c0 f0       	brcs	.+48     	; 0x9be <__fp_cmp+0x46>
 98e:	12 16       	cp	r1, r18
 990:	13 06       	cpc	r1, r19
 992:	e4 07       	cpc	r30, r20
 994:	f5 07       	cpc	r31, r21
 996:	98 f0       	brcs	.+38     	; 0x9be <__fp_cmp+0x46>
 998:	62 1b       	sub	r22, r18
 99a:	73 0b       	sbc	r23, r19
 99c:	84 0b       	sbc	r24, r20
 99e:	95 0b       	sbc	r25, r21
 9a0:	39 f4       	brne	.+14     	; 0x9b0 <__fp_cmp+0x38>
 9a2:	0a 26       	eor	r0, r26
 9a4:	61 f0       	breq	.+24     	; 0x9be <__fp_cmp+0x46>
 9a6:	23 2b       	or	r18, r19
 9a8:	24 2b       	or	r18, r20
 9aa:	25 2b       	or	r18, r21
 9ac:	21 f4       	brne	.+8      	; 0x9b6 <__fp_cmp+0x3e>
 9ae:	08 95       	ret
 9b0:	0a 26       	eor	r0, r26
 9b2:	09 f4       	brne	.+2      	; 0x9b6 <__fp_cmp+0x3e>
 9b4:	a1 40       	sbci	r26, 0x01	; 1
 9b6:	a6 95       	lsr	r26
 9b8:	8f ef       	ldi	r24, 0xFF	; 255
 9ba:	81 1d       	adc	r24, r1
 9bc:	81 1d       	adc	r24, r1
 9be:	08 95       	ret

000009c0 <__fp_inf>:
 9c0:	97 f9       	bld	r25, 7
 9c2:	9f 67       	ori	r25, 0x7F	; 127
 9c4:	80 e8       	ldi	r24, 0x80	; 128
 9c6:	70 e0       	ldi	r23, 0x00	; 0
 9c8:	60 e0       	ldi	r22, 0x00	; 0
 9ca:	08 95       	ret

000009cc <__fp_nan>:
 9cc:	9f ef       	ldi	r25, 0xFF	; 255
 9ce:	80 ec       	ldi	r24, 0xC0	; 192
 9d0:	08 95       	ret

000009d2 <__fp_negdi>:
 9d2:	90 95       	com	r25
 9d4:	80 95       	com	r24
 9d6:	70 95       	com	r23
 9d8:	60 95       	com	r22
 9da:	50 95       	com	r21
 9dc:	40 95       	com	r20
 9de:	30 95       	com	r19
 9e0:	21 95       	neg	r18
 9e2:	3f 4f       	sbci	r19, 0xFF	; 255
 9e4:	4f 4f       	sbci	r20, 0xFF	; 255
 9e6:	5f 4f       	sbci	r21, 0xFF	; 255
 9e8:	6f 4f       	sbci	r22, 0xFF	; 255
 9ea:	7f 4f       	sbci	r23, 0xFF	; 255
 9ec:	8f 4f       	sbci	r24, 0xFF	; 255
 9ee:	9f 4f       	sbci	r25, 0xFF	; 255
 9f0:	08 95       	ret

000009f2 <__fp_pscA>:
 9f2:	00 24       	eor	r0, r0
 9f4:	0a 94       	dec	r0
 9f6:	16 16       	cp	r1, r22
 9f8:	17 06       	cpc	r1, r23
 9fa:	18 06       	cpc	r1, r24
 9fc:	09 06       	cpc	r0, r25
 9fe:	08 95       	ret

00000a00 <__fp_pscB>:
 a00:	00 24       	eor	r0, r0
 a02:	0a 94       	dec	r0
 a04:	12 16       	cp	r1, r18
 a06:	13 06       	cpc	r1, r19
 a08:	14 06       	cpc	r1, r20
 a0a:	05 06       	cpc	r0, r21
 a0c:	08 95       	ret
 a0e:	de cf       	rjmp	.-68     	; 0x9cc <__fp_nan>

00000a10 <__fp_rempio2>:
 a10:	50 d0       	rcall	.+160    	; 0xab2 <__fp_splitA>
 a12:	e8 f3       	brcs	.-6      	; 0xa0e <__fp_pscB+0xe>
 a14:	e8 94       	clt
 a16:	e0 e0       	ldi	r30, 0x00	; 0
 a18:	bb 27       	eor	r27, r27
 a1a:	9f 57       	subi	r25, 0x7F	; 127
 a1c:	f0 f0       	brcs	.+60     	; 0xa5a <__fp_rempio2+0x4a>
 a1e:	2a ed       	ldi	r18, 0xDA	; 218
 a20:	3f e0       	ldi	r19, 0x0F	; 15
 a22:	49 ec       	ldi	r20, 0xC9	; 201
 a24:	06 c0       	rjmp	.+12     	; 0xa32 <__fp_rempio2+0x22>
 a26:	ee 0f       	add	r30, r30
 a28:	bb 0f       	add	r27, r27
 a2a:	66 1f       	adc	r22, r22
 a2c:	77 1f       	adc	r23, r23
 a2e:	88 1f       	adc	r24, r24
 a30:	28 f0       	brcs	.+10     	; 0xa3c <__fp_rempio2+0x2c>
 a32:	b2 3a       	cpi	r27, 0xA2	; 162
 a34:	62 07       	cpc	r22, r18
 a36:	73 07       	cpc	r23, r19
 a38:	84 07       	cpc	r24, r20
 a3a:	28 f0       	brcs	.+10     	; 0xa46 <__fp_rempio2+0x36>
 a3c:	b2 5a       	subi	r27, 0xA2	; 162
 a3e:	62 0b       	sbc	r22, r18
 a40:	73 0b       	sbc	r23, r19
 a42:	84 0b       	sbc	r24, r20
 a44:	e3 95       	inc	r30
 a46:	9a 95       	dec	r25
 a48:	72 f7       	brpl	.-36     	; 0xa26 <__fp_rempio2+0x16>
 a4a:	80 38       	cpi	r24, 0x80	; 128
 a4c:	30 f4       	brcc	.+12     	; 0xa5a <__fp_rempio2+0x4a>
 a4e:	9a 95       	dec	r25
 a50:	bb 0f       	add	r27, r27
 a52:	66 1f       	adc	r22, r22
 a54:	77 1f       	adc	r23, r23
 a56:	88 1f       	adc	r24, r24
 a58:	d2 f7       	brpl	.-12     	; 0xa4e <__fp_rempio2+0x3e>
 a5a:	90 48       	sbci	r25, 0x80	; 128
 a5c:	f6 c0       	rjmp	.+492    	; 0xc4a <__fp_mpack_finite>

00000a5e <__fp_round>:
 a5e:	09 2e       	mov	r0, r25
 a60:	03 94       	inc	r0
 a62:	00 0c       	add	r0, r0
 a64:	11 f4       	brne	.+4      	; 0xa6a <__fp_round+0xc>
 a66:	88 23       	and	r24, r24
 a68:	52 f0       	brmi	.+20     	; 0xa7e <__fp_round+0x20>
 a6a:	bb 0f       	add	r27, r27
 a6c:	40 f4       	brcc	.+16     	; 0xa7e <__fp_round+0x20>
 a6e:	bf 2b       	or	r27, r31
 a70:	11 f4       	brne	.+4      	; 0xa76 <__fp_round+0x18>
 a72:	60 ff       	sbrs	r22, 0
 a74:	04 c0       	rjmp	.+8      	; 0xa7e <__fp_round+0x20>
 a76:	6f 5f       	subi	r22, 0xFF	; 255
 a78:	7f 4f       	sbci	r23, 0xFF	; 255
 a7a:	8f 4f       	sbci	r24, 0xFF	; 255
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	08 95       	ret

00000a80 <__fp_sinus>:
 a80:	ef 93       	push	r30
 a82:	e0 ff       	sbrs	r30, 0
 a84:	06 c0       	rjmp	.+12     	; 0xa92 <__fp_sinus+0x12>
 a86:	a2 ea       	ldi	r26, 0xA2	; 162
 a88:	2a ed       	ldi	r18, 0xDA	; 218
 a8a:	3f e0       	ldi	r19, 0x0F	; 15
 a8c:	49 ec       	ldi	r20, 0xC9	; 201
 a8e:	5f eb       	ldi	r21, 0xBF	; 191
 a90:	3e de       	rcall	.-900    	; 0x70e <__addsf3x>
 a92:	e5 df       	rcall	.-54     	; 0xa5e <__fp_round>
 a94:	0f 90       	pop	r0
 a96:	03 94       	inc	r0
 a98:	01 fc       	sbrc	r0, 1
 a9a:	90 58       	subi	r25, 0x80	; 128
 a9c:	e8 e6       	ldi	r30, 0x68	; 104
 a9e:	f0 e0       	ldi	r31, 0x00	; 0
 aa0:	e7 c0       	rjmp	.+462    	; 0xc70 <__fp_powsodd>

00000aa2 <__fp_split3>:
 aa2:	57 fd       	sbrc	r21, 7
 aa4:	90 58       	subi	r25, 0x80	; 128
 aa6:	44 0f       	add	r20, r20
 aa8:	55 1f       	adc	r21, r21
 aaa:	59 f0       	breq	.+22     	; 0xac2 <__fp_splitA+0x10>
 aac:	5f 3f       	cpi	r21, 0xFF	; 255
 aae:	71 f0       	breq	.+28     	; 0xacc <__fp_splitA+0x1a>
 ab0:	47 95       	ror	r20

00000ab2 <__fp_splitA>:
 ab2:	88 0f       	add	r24, r24
 ab4:	97 fb       	bst	r25, 7
 ab6:	99 1f       	adc	r25, r25
 ab8:	61 f0       	breq	.+24     	; 0xad2 <__fp_splitA+0x20>
 aba:	9f 3f       	cpi	r25, 0xFF	; 255
 abc:	79 f0       	breq	.+30     	; 0xadc <__fp_splitA+0x2a>
 abe:	87 95       	ror	r24
 ac0:	08 95       	ret
 ac2:	12 16       	cp	r1, r18
 ac4:	13 06       	cpc	r1, r19
 ac6:	14 06       	cpc	r1, r20
 ac8:	55 1f       	adc	r21, r21
 aca:	f2 cf       	rjmp	.-28     	; 0xab0 <__fp_split3+0xe>
 acc:	46 95       	lsr	r20
 ace:	f1 df       	rcall	.-30     	; 0xab2 <__fp_splitA>
 ad0:	08 c0       	rjmp	.+16     	; 0xae2 <__fp_splitA+0x30>
 ad2:	16 16       	cp	r1, r22
 ad4:	17 06       	cpc	r1, r23
 ad6:	18 06       	cpc	r1, r24
 ad8:	99 1f       	adc	r25, r25
 ada:	f1 cf       	rjmp	.-30     	; 0xabe <__fp_splitA+0xc>
 adc:	86 95       	lsr	r24
 ade:	71 05       	cpc	r23, r1
 ae0:	61 05       	cpc	r22, r1
 ae2:	08 94       	sec
 ae4:	08 95       	ret

00000ae6 <__fp_zero>:
 ae6:	e8 94       	clt

00000ae8 <__fp_szero>:
 ae8:	bb 27       	eor	r27, r27
 aea:	66 27       	eor	r22, r22
 aec:	77 27       	eor	r23, r23
 aee:	cb 01       	movw	r24, r22
 af0:	97 f9       	bld	r25, 7
 af2:	08 95       	ret

00000af4 <__gesf2>:
 af4:	41 df       	rcall	.-382    	; 0x978 <__fp_cmp>
 af6:	08 f4       	brcc	.+2      	; 0xafa <__gesf2+0x6>
 af8:	8f ef       	ldi	r24, 0xFF	; 255
 afa:	08 95       	ret

00000afc <__mulsf3>:
 afc:	0b d0       	rcall	.+22     	; 0xb14 <__mulsf3x>
 afe:	af cf       	rjmp	.-162    	; 0xa5e <__fp_round>
 b00:	78 df       	rcall	.-272    	; 0x9f2 <__fp_pscA>
 b02:	28 f0       	brcs	.+10     	; 0xb0e <__mulsf3+0x12>
 b04:	7d df       	rcall	.-262    	; 0xa00 <__fp_pscB>
 b06:	18 f0       	brcs	.+6      	; 0xb0e <__mulsf3+0x12>
 b08:	95 23       	and	r25, r21
 b0a:	09 f0       	breq	.+2      	; 0xb0e <__mulsf3+0x12>
 b0c:	59 cf       	rjmp	.-334    	; 0x9c0 <__fp_inf>
 b0e:	5e cf       	rjmp	.-324    	; 0x9cc <__fp_nan>
 b10:	11 24       	eor	r1, r1
 b12:	ea cf       	rjmp	.-44     	; 0xae8 <__fp_szero>

00000b14 <__mulsf3x>:
 b14:	c6 df       	rcall	.-116    	; 0xaa2 <__fp_split3>
 b16:	a0 f3       	brcs	.-24     	; 0xb00 <__mulsf3+0x4>

00000b18 <__mulsf3_pse>:
 b18:	95 9f       	mul	r25, r21
 b1a:	d1 f3       	breq	.-12     	; 0xb10 <__mulsf3+0x14>
 b1c:	95 0f       	add	r25, r21
 b1e:	50 e0       	ldi	r21, 0x00	; 0
 b20:	55 1f       	adc	r21, r21
 b22:	62 9f       	mul	r22, r18
 b24:	f0 01       	movw	r30, r0
 b26:	72 9f       	mul	r23, r18
 b28:	bb 27       	eor	r27, r27
 b2a:	f0 0d       	add	r31, r0
 b2c:	b1 1d       	adc	r27, r1
 b2e:	63 9f       	mul	r22, r19
 b30:	aa 27       	eor	r26, r26
 b32:	f0 0d       	add	r31, r0
 b34:	b1 1d       	adc	r27, r1
 b36:	aa 1f       	adc	r26, r26
 b38:	64 9f       	mul	r22, r20
 b3a:	66 27       	eor	r22, r22
 b3c:	b0 0d       	add	r27, r0
 b3e:	a1 1d       	adc	r26, r1
 b40:	66 1f       	adc	r22, r22
 b42:	82 9f       	mul	r24, r18
 b44:	22 27       	eor	r18, r18
 b46:	b0 0d       	add	r27, r0
 b48:	a1 1d       	adc	r26, r1
 b4a:	62 1f       	adc	r22, r18
 b4c:	73 9f       	mul	r23, r19
 b4e:	b0 0d       	add	r27, r0
 b50:	a1 1d       	adc	r26, r1
 b52:	62 1f       	adc	r22, r18
 b54:	83 9f       	mul	r24, r19
 b56:	a0 0d       	add	r26, r0
 b58:	61 1d       	adc	r22, r1
 b5a:	22 1f       	adc	r18, r18
 b5c:	74 9f       	mul	r23, r20
 b5e:	33 27       	eor	r19, r19
 b60:	a0 0d       	add	r26, r0
 b62:	61 1d       	adc	r22, r1
 b64:	23 1f       	adc	r18, r19
 b66:	84 9f       	mul	r24, r20
 b68:	60 0d       	add	r22, r0
 b6a:	21 1d       	adc	r18, r1
 b6c:	82 2f       	mov	r24, r18
 b6e:	76 2f       	mov	r23, r22
 b70:	6a 2f       	mov	r22, r26
 b72:	11 24       	eor	r1, r1
 b74:	9f 57       	subi	r25, 0x7F	; 127
 b76:	50 40       	sbci	r21, 0x00	; 0
 b78:	8a f0       	brmi	.+34     	; 0xb9c <__mulsf3_pse+0x84>
 b7a:	e1 f0       	breq	.+56     	; 0xbb4 <__mulsf3_pse+0x9c>
 b7c:	88 23       	and	r24, r24
 b7e:	4a f0       	brmi	.+18     	; 0xb92 <__mulsf3_pse+0x7a>
 b80:	ee 0f       	add	r30, r30
 b82:	ff 1f       	adc	r31, r31
 b84:	bb 1f       	adc	r27, r27
 b86:	66 1f       	adc	r22, r22
 b88:	77 1f       	adc	r23, r23
 b8a:	88 1f       	adc	r24, r24
 b8c:	91 50       	subi	r25, 0x01	; 1
 b8e:	50 40       	sbci	r21, 0x00	; 0
 b90:	a9 f7       	brne	.-22     	; 0xb7c <__mulsf3_pse+0x64>
 b92:	9e 3f       	cpi	r25, 0xFE	; 254
 b94:	51 05       	cpc	r21, r1
 b96:	70 f0       	brcs	.+28     	; 0xbb4 <__mulsf3_pse+0x9c>
 b98:	13 cf       	rjmp	.-474    	; 0x9c0 <__fp_inf>
 b9a:	a6 cf       	rjmp	.-180    	; 0xae8 <__fp_szero>
 b9c:	5f 3f       	cpi	r21, 0xFF	; 255
 b9e:	ec f3       	brlt	.-6      	; 0xb9a <__mulsf3_pse+0x82>
 ba0:	98 3e       	cpi	r25, 0xE8	; 232
 ba2:	dc f3       	brlt	.-10     	; 0xb9a <__mulsf3_pse+0x82>
 ba4:	86 95       	lsr	r24
 ba6:	77 95       	ror	r23
 ba8:	67 95       	ror	r22
 baa:	b7 95       	ror	r27
 bac:	f7 95       	ror	r31
 bae:	e7 95       	ror	r30
 bb0:	9f 5f       	subi	r25, 0xFF	; 255
 bb2:	c1 f7       	brne	.-16     	; 0xba4 <__mulsf3_pse+0x8c>
 bb4:	fe 2b       	or	r31, r30
 bb6:	88 0f       	add	r24, r24
 bb8:	91 1d       	adc	r25, r1
 bba:	96 95       	lsr	r25
 bbc:	87 95       	ror	r24
 bbe:	97 f9       	bld	r25, 7
 bc0:	08 95       	ret
 bc2:	11 f4       	brne	.+4      	; 0xbc8 <__mulsf3_pse+0xb0>
 bc4:	0e f4       	brtc	.+2      	; 0xbc8 <__mulsf3_pse+0xb0>
 bc6:	02 cf       	rjmp	.-508    	; 0x9cc <__fp_nan>
 bc8:	3e c0       	rjmp	.+124    	; 0xc46 <__fp_mpack>

00000bca <sqrt>:
 bca:	73 df       	rcall	.-282    	; 0xab2 <__fp_splitA>
 bcc:	d0 f3       	brcs	.-12     	; 0xbc2 <__mulsf3_pse+0xaa>
 bce:	99 23       	and	r25, r25
 bd0:	d9 f3       	breq	.-10     	; 0xbc8 <__mulsf3_pse+0xb0>
 bd2:	ce f3       	brts	.-14     	; 0xbc6 <__mulsf3_pse+0xae>
 bd4:	9f 57       	subi	r25, 0x7F	; 127
 bd6:	55 0b       	sbc	r21, r21
 bd8:	87 ff       	sbrs	r24, 7
 bda:	43 d0       	rcall	.+134    	; 0xc62 <__fp_norm2>
 bdc:	00 24       	eor	r0, r0
 bde:	a0 e6       	ldi	r26, 0x60	; 96
 be0:	40 ea       	ldi	r20, 0xA0	; 160
 be2:	90 01       	movw	r18, r0
 be4:	80 58       	subi	r24, 0x80	; 128
 be6:	56 95       	lsr	r21
 be8:	97 95       	ror	r25
 bea:	28 f4       	brcc	.+10     	; 0xbf6 <sqrt+0x2c>
 bec:	80 5c       	subi	r24, 0xC0	; 192
 bee:	66 0f       	add	r22, r22
 bf0:	77 1f       	adc	r23, r23
 bf2:	88 1f       	adc	r24, r24
 bf4:	20 f0       	brcs	.+8      	; 0xbfe <sqrt+0x34>
 bf6:	26 17       	cp	r18, r22
 bf8:	37 07       	cpc	r19, r23
 bfa:	48 07       	cpc	r20, r24
 bfc:	30 f4       	brcc	.+12     	; 0xc0a <sqrt+0x40>
 bfe:	62 1b       	sub	r22, r18
 c00:	73 0b       	sbc	r23, r19
 c02:	84 0b       	sbc	r24, r20
 c04:	20 29       	or	r18, r0
 c06:	31 29       	or	r19, r1
 c08:	4a 2b       	or	r20, r26
 c0a:	a6 95       	lsr	r26
 c0c:	17 94       	ror	r1
 c0e:	07 94       	ror	r0
 c10:	20 25       	eor	r18, r0
 c12:	31 25       	eor	r19, r1
 c14:	4a 27       	eor	r20, r26
 c16:	58 f7       	brcc	.-42     	; 0xbee <sqrt+0x24>
 c18:	66 0f       	add	r22, r22
 c1a:	77 1f       	adc	r23, r23
 c1c:	88 1f       	adc	r24, r24
 c1e:	20 f0       	brcs	.+8      	; 0xc28 <sqrt+0x5e>
 c20:	26 17       	cp	r18, r22
 c22:	37 07       	cpc	r19, r23
 c24:	48 07       	cpc	r20, r24
 c26:	30 f4       	brcc	.+12     	; 0xc34 <sqrt+0x6a>
 c28:	62 0b       	sbc	r22, r18
 c2a:	73 0b       	sbc	r23, r19
 c2c:	84 0b       	sbc	r24, r20
 c2e:	20 0d       	add	r18, r0
 c30:	31 1d       	adc	r19, r1
 c32:	41 1d       	adc	r20, r1
 c34:	a0 95       	com	r26
 c36:	81 f7       	brne	.-32     	; 0xc18 <sqrt+0x4e>
 c38:	b9 01       	movw	r22, r18
 c3a:	84 2f       	mov	r24, r20
 c3c:	91 58       	subi	r25, 0x81	; 129
 c3e:	88 0f       	add	r24, r24
 c40:	96 95       	lsr	r25
 c42:	87 95       	ror	r24
 c44:	08 95       	ret

00000c46 <__fp_mpack>:
 c46:	9f 3f       	cpi	r25, 0xFF	; 255
 c48:	31 f0       	breq	.+12     	; 0xc56 <__fp_mpack_finite+0xc>

00000c4a <__fp_mpack_finite>:
 c4a:	91 50       	subi	r25, 0x01	; 1
 c4c:	20 f4       	brcc	.+8      	; 0xc56 <__fp_mpack_finite+0xc>
 c4e:	87 95       	ror	r24
 c50:	77 95       	ror	r23
 c52:	67 95       	ror	r22
 c54:	b7 95       	ror	r27
 c56:	88 0f       	add	r24, r24
 c58:	91 1d       	adc	r25, r1
 c5a:	96 95       	lsr	r25
 c5c:	87 95       	ror	r24
 c5e:	97 f9       	bld	r25, 7
 c60:	08 95       	ret

00000c62 <__fp_norm2>:
 c62:	91 50       	subi	r25, 0x01	; 1
 c64:	50 40       	sbci	r21, 0x00	; 0
 c66:	66 0f       	add	r22, r22
 c68:	77 1f       	adc	r23, r23
 c6a:	88 1f       	adc	r24, r24
 c6c:	d2 f7       	brpl	.-12     	; 0xc62 <__fp_norm2>
 c6e:	08 95       	ret

00000c70 <__fp_powsodd>:
 c70:	9f 93       	push	r25
 c72:	8f 93       	push	r24
 c74:	7f 93       	push	r23
 c76:	6f 93       	push	r22
 c78:	ff 93       	push	r31
 c7a:	ef 93       	push	r30
 c7c:	9b 01       	movw	r18, r22
 c7e:	ac 01       	movw	r20, r24
 c80:	3d df       	rcall	.-390    	; 0xafc <__mulsf3>
 c82:	ef 91       	pop	r30
 c84:	ff 91       	pop	r31
 c86:	05 d0       	rcall	.+10     	; 0xc92 <__fp_powser>
 c88:	2f 91       	pop	r18
 c8a:	3f 91       	pop	r19
 c8c:	4f 91       	pop	r20
 c8e:	5f 91       	pop	r21
 c90:	35 cf       	rjmp	.-406    	; 0xafc <__mulsf3>

00000c92 <__fp_powser>:
 c92:	df 93       	push	r29
 c94:	cf 93       	push	r28
 c96:	1f 93       	push	r17
 c98:	0f 93       	push	r16
 c9a:	ff 92       	push	r15
 c9c:	ef 92       	push	r14
 c9e:	df 92       	push	r13
 ca0:	7b 01       	movw	r14, r22
 ca2:	8c 01       	movw	r16, r24
 ca4:	68 94       	set
 ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <__fp_powser+0x20>
 ca8:	da 2e       	mov	r13, r26
 caa:	ef 01       	movw	r28, r30
 cac:	33 df       	rcall	.-410    	; 0xb14 <__mulsf3x>
 cae:	fe 01       	movw	r30, r28
 cb0:	e8 94       	clt
 cb2:	a5 91       	lpm	r26, Z+
 cb4:	25 91       	lpm	r18, Z+
 cb6:	35 91       	lpm	r19, Z+
 cb8:	45 91       	lpm	r20, Z+
 cba:	55 91       	lpm	r21, Z+
 cbc:	ae f3       	brts	.-22     	; 0xca8 <__fp_powser+0x16>
 cbe:	ef 01       	movw	r28, r30
 cc0:	26 dd       	rcall	.-1460   	; 0x70e <__addsf3x>
 cc2:	fe 01       	movw	r30, r28
 cc4:	97 01       	movw	r18, r14
 cc6:	a8 01       	movw	r20, r16
 cc8:	da 94       	dec	r13
 cca:	79 f7       	brne	.-34     	; 0xcaa <__fp_powser+0x18>
 ccc:	df 90       	pop	r13
 cce:	ef 90       	pop	r14
 cd0:	ff 90       	pop	r15
 cd2:	0f 91       	pop	r16
 cd4:	1f 91       	pop	r17
 cd6:	cf 91       	pop	r28
 cd8:	df 91       	pop	r29
 cda:	08 95       	ret

00000cdc <itoa>:
 cdc:	fb 01       	movw	r30, r22
 cde:	9f 01       	movw	r18, r30
 ce0:	e8 94       	clt
 ce2:	42 30       	cpi	r20, 0x02	; 2
 ce4:	c4 f0       	brlt	.+48     	; 0xd16 <itoa+0x3a>
 ce6:	45 32       	cpi	r20, 0x25	; 37
 ce8:	b4 f4       	brge	.+44     	; 0xd16 <itoa+0x3a>
 cea:	4a 30       	cpi	r20, 0x0A	; 10
 cec:	29 f4       	brne	.+10     	; 0xcf8 <itoa+0x1c>
 cee:	97 fb       	bst	r25, 7
 cf0:	1e f4       	brtc	.+6      	; 0xcf8 <itoa+0x1c>
 cf2:	90 95       	com	r25
 cf4:	81 95       	neg	r24
 cf6:	9f 4f       	sbci	r25, 0xFF	; 255
 cf8:	64 2f       	mov	r22, r20
 cfa:	77 27       	eor	r23, r23
 cfc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__udivmodhi4>
 d00:	80 5d       	subi	r24, 0xD0	; 208
 d02:	8a 33       	cpi	r24, 0x3A	; 58
 d04:	0c f0       	brlt	.+2      	; 0xd08 <itoa+0x2c>
 d06:	89 5d       	subi	r24, 0xD9	; 217
 d08:	81 93       	st	Z+, r24
 d0a:	cb 01       	movw	r24, r22
 d0c:	00 97       	sbiw	r24, 0x00	; 0
 d0e:	a1 f7       	brne	.-24     	; 0xcf8 <itoa+0x1c>
 d10:	16 f4       	brtc	.+4      	; 0xd16 <itoa+0x3a>
 d12:	5d e2       	ldi	r21, 0x2D	; 45
 d14:	51 93       	st	Z+, r21
 d16:	10 82       	st	Z, r1
 d18:	c9 01       	movw	r24, r18
 d1a:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <strrev>

00000d1e <strrev>:
 d1e:	dc 01       	movw	r26, r24
 d20:	fc 01       	movw	r30, r24
 d22:	67 2f       	mov	r22, r23
 d24:	71 91       	ld	r23, Z+
 d26:	77 23       	and	r23, r23
 d28:	e1 f7       	brne	.-8      	; 0xd22 <strrev+0x4>
 d2a:	32 97       	sbiw	r30, 0x02	; 2
 d2c:	04 c0       	rjmp	.+8      	; 0xd36 <strrev+0x18>
 d2e:	7c 91       	ld	r23, X
 d30:	6d 93       	st	X+, r22
 d32:	70 83       	st	Z, r23
 d34:	62 91       	ld	r22, -Z
 d36:	ae 17       	cp	r26, r30
 d38:	bf 07       	cpc	r27, r31
 d3a:	c8 f3       	brcs	.-14     	; 0xd2e <strrev+0x10>
 d3c:	08 95       	ret

00000d3e <__udivmodhi4>:
 d3e:	aa 1b       	sub	r26, r26
 d40:	bb 1b       	sub	r27, r27
 d42:	51 e1       	ldi	r21, 0x11	; 17
 d44:	07 c0       	rjmp	.+14     	; 0xd54 <__udivmodhi4_ep>

00000d46 <__udivmodhi4_loop>:
 d46:	aa 1f       	adc	r26, r26
 d48:	bb 1f       	adc	r27, r27
 d4a:	a6 17       	cp	r26, r22
 d4c:	b7 07       	cpc	r27, r23
 d4e:	10 f0       	brcs	.+4      	; 0xd54 <__udivmodhi4_ep>
 d50:	a6 1b       	sub	r26, r22
 d52:	b7 0b       	sbc	r27, r23

00000d54 <__udivmodhi4_ep>:
 d54:	88 1f       	adc	r24, r24
 d56:	99 1f       	adc	r25, r25
 d58:	5a 95       	dec	r21
 d5a:	a9 f7       	brne	.-22     	; 0xd46 <__udivmodhi4_loop>
 d5c:	80 95       	com	r24
 d5e:	90 95       	com	r25
 d60:	bc 01       	movw	r22, r24
 d62:	cd 01       	movw	r24, r26
 d64:	08 95       	ret

00000d66 <_exit>:
 d66:	f8 94       	cli

00000d68 <__stop_program>:
 d68:	ff cf       	rjmp	.-2      	; 0xd68 <__stop_program>
