
stringwinder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000e04  00000e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800108  00800108  00000ea0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001e6  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000790  00000000  00000000  000010a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002af  00000000  00000000  00001836  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000668  00000000  00000000  00001ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00002150  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000411  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000041c  00000000  00000000  000026f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002b0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_11>
  30:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_12>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_14>
  3c:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_15>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__fp_di2sf+0x3a>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	e4 e0       	ldi	r30, 0x04	; 4
  9a:	fe e0       	ldi	r31, 0x0E	; 14
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <.do_copy_data_start>

0000009e <.do_copy_data_loop>:
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0

000000a2 <.do_copy_data_start>:
  a2:	a8 30       	cpi	r26, 0x08	; 8
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <.do_copy_data_loop>

000000a8 <__do_clear_bss>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a8 e0       	ldi	r26, 0x08	; 8
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a9 31       	cpi	r26, 0x19	; 25
  b4:	b1 07       	cpc	r27, r17
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 8e 03 	call	0x71c	; 0x71c <main>
  bc:	0c 94 00 07 	jmp	0xe00	; 0xe00 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <__vector_14>:
     |/| |/| |
comp B A B A B
step --__--__-
*/

ISR(TIMER0_COMPA_vect){
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	1f 93       	push	r17
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	6f 93       	push	r22
  da:	7f 93       	push	r23
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	af 93       	push	r26
  e2:	bf 93       	push	r27
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
	PORTB &= ~(1 << spindleStepPin); //turn off step pin
  e8:	2b 98       	cbi	0x05, 3	; 5
	steps_spindle++;
  ea:	80 91 08 01 	lds	r24, 0x0108
  ee:	20 91 09 01 	lds	r18, 0x0109
  f2:	30 91 0a 01 	lds	r19, 0x010A
  f6:	40 91 0b 01 	lds	r20, 0x010B
  fa:	60 91 0c 01 	lds	r22, 0x010C
  fe:	e0 91 0d 01 	lds	r30, 0x010D
 102:	a0 91 0e 01 	lds	r26, 0x010E
 106:	10 91 0f 01 	lds	r17, 0x010F
 10a:	b8 2f       	mov	r27, r24
 10c:	bf 5f       	subi	r27, 0xFF	; 255
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	b8 17       	cp	r27, r24
 112:	08 f0       	brcs	.+2      	; 0x116 <__vector_14+0x52>
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	f9 2f       	mov	r31, r25
 118:	f2 0f       	add	r31, r18
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	f2 17       	cp	r31, r18
 11e:	08 f0       	brcs	.+2      	; 0x122 <__vector_14+0x5e>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	78 2f       	mov	r23, r24
 124:	73 0f       	add	r23, r19
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	73 17       	cp	r23, r19
 12a:	08 f0       	brcs	.+2      	; 0x12e <__vector_14+0x6a>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	58 2f       	mov	r21, r24
 130:	54 0f       	add	r21, r20
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	54 17       	cp	r21, r20
 136:	08 f0       	brcs	.+2      	; 0x13a <__vector_14+0x76>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	38 2f       	mov	r19, r24
 13c:	36 0f       	add	r19, r22
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	36 17       	cp	r19, r22
 142:	08 f0       	brcs	.+2      	; 0x146 <__vector_14+0x82>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	28 2f       	mov	r18, r24
 148:	2e 0f       	add	r18, r30
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	2e 17       	cp	r18, r30
 14e:	08 f0       	brcs	.+2      	; 0x152 <__vector_14+0x8e>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	98 2f       	mov	r25, r24
 154:	9a 0f       	add	r25, r26
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	9a 17       	cp	r25, r26
 15a:	08 f0       	brcs	.+2      	; 0x15e <__vector_14+0x9a>
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	81 0f       	add	r24, r17
 160:	b0 93 08 01 	sts	0x0108, r27
 164:	f0 93 09 01 	sts	0x0109, r31
 168:	70 93 0a 01 	sts	0x010A, r23
 16c:	50 93 0b 01 	sts	0x010B, r21
 170:	30 93 0c 01 	sts	0x010C, r19
 174:	20 93 0d 01 	sts	0x010D, r18
 178:	90 93 0e 01 	sts	0x010E, r25
 17c:	80 93 0f 01 	sts	0x010F, r24
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	1f 91       	pop	r17
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	1f 93       	push	r17
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
	PORTB &= ~(1 << carriageStepPin);
 1c8:	2c 98       	cbi	0x05, 4	; 5
	steps_carriage++;
 1ca:	80 91 10 01 	lds	r24, 0x0110
 1ce:	20 91 11 01 	lds	r18, 0x0111
 1d2:	30 91 12 01 	lds	r19, 0x0112
 1d6:	40 91 13 01 	lds	r20, 0x0113
 1da:	60 91 14 01 	lds	r22, 0x0114
 1de:	e0 91 15 01 	lds	r30, 0x0115
 1e2:	a0 91 16 01 	lds	r26, 0x0116
 1e6:	10 91 17 01 	lds	r17, 0x0117
 1ea:	b8 2f       	mov	r27, r24
 1ec:	bf 5f       	subi	r27, 0xFF	; 255
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	b8 17       	cp	r27, r24
 1f2:	08 f0       	brcs	.+2      	; 0x1f6 <__vector_11+0x52>
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	f9 2f       	mov	r31, r25
 1f8:	f2 0f       	add	r31, r18
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	f2 17       	cp	r31, r18
 1fe:	08 f0       	brcs	.+2      	; 0x202 <__vector_11+0x5e>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	78 2f       	mov	r23, r24
 204:	73 0f       	add	r23, r19
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	73 17       	cp	r23, r19
 20a:	08 f0       	brcs	.+2      	; 0x20e <__vector_11+0x6a>
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	58 2f       	mov	r21, r24
 210:	54 0f       	add	r21, r20
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	54 17       	cp	r21, r20
 216:	08 f0       	brcs	.+2      	; 0x21a <__vector_11+0x76>
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	38 2f       	mov	r19, r24
 21c:	36 0f       	add	r19, r22
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	36 17       	cp	r19, r22
 222:	08 f0       	brcs	.+2      	; 0x226 <__vector_11+0x82>
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	28 2f       	mov	r18, r24
 228:	2e 0f       	add	r18, r30
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	2e 17       	cp	r18, r30
 22e:	08 f0       	brcs	.+2      	; 0x232 <__vector_11+0x8e>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	98 2f       	mov	r25, r24
 234:	9a 0f       	add	r25, r26
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	9a 17       	cp	r25, r26
 23a:	08 f0       	brcs	.+2      	; 0x23e <__vector_11+0x9a>
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	81 0f       	add	r24, r17
 240:	b0 93 10 01 	sts	0x0110, r27
 244:	f0 93 11 01 	sts	0x0111, r31
 248:	70 93 12 01 	sts	0x0112, r23
 24c:	50 93 13 01 	sts	0x0113, r21
 250:	30 93 14 01 	sts	0x0114, r19
 254:	20 93 15 01 	sts	0x0115, r18
 258:	90 93 16 01 	sts	0x0116, r25
 25c:	80 93 17 01 	sts	0x0117, r24
}
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	7f 91       	pop	r23
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	1f 91       	pop	r17
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <__vector_15>:

ISR(TIMER0_COMPB_vect){
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
	PORTB |= (1 << spindleStepPin); //turn on step pin
 28e:	2b 9a       	sbi	0x05, 3	; 5
	TCNT0 = 0;
 290:	16 bc       	out	0x26, r1	; 38
}
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <__vector_12>:

ISR(TIMER1_COMPB_vect){
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
	PORTB |= (1 << carriageStepPin);
 2a6:	2c 9a       	sbi	0x05, 4	; 5
	TCNT1 = 0;
 2a8:	10 92 85 00 	sts	0x0085, r1
 2ac:	10 92 84 00 	sts	0x0084, r1
}
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <_Z4angVd>:

double angV(double rpm){
 2ba:	9b 01       	movw	r18, r22
 2bc:	ac 01       	movw	r20, r24
 2be:	0e 94 c3 03 	call	0x786	; 0x786 <__addsf3>
 2c2:	2b ed       	ldi	r18, 0xDB	; 219
 2c4:	3f e0       	ldi	r19, 0x0F	; 15
 2c6:	49 e4       	ldi	r20, 0x49	; 73
 2c8:	50 e4       	ldi	r21, 0x40	; 64
 2ca:	0e 94 cb 05 	call	0xb96	; 0xb96 <__mulsf3>
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	40 e7       	ldi	r20, 0x70	; 112
 2d4:	52 e4       	ldi	r21, 0x42	; 66
 2d6:	0e 94 2e 04 	call	0x85c	; 0x85c <__divsf3>
	return (rpm*2.0*M_PI)/60.0;
}
 2da:	08 95       	ret

000002dc <_Z13setSpindleRPMd>:

void setSpindleRPM(double rpm){
 2dc:	9b 01       	movw	r18, r22
 2de:	ac 01       	movw	r20, r24
	int compareValue = (int)(60.0*F_CPU/prescale_s/microstep_s/stepsperrot_s/rpm);
	OCR0B = compareValue;
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	7c e7       	ldi	r23, 0x7C	; 124
 2e4:	82 e1       	ldi	r24, 0x12	; 18
 2e6:	96 e4       	ldi	r25, 0x46	; 70
 2e8:	0e 94 2e 04 	call	0x85c	; 0x85c <__divsf3>
 2ec:	0e 94 96 04 	call	0x92c	; 0x92c <__fixsfsi>
 2f0:	68 bd       	out	0x28, r22	; 40
}
 2f2:	08 95       	ret

000002f4 <_Z14setCarriageRPMd>:

void setCarriageRPM(double rpm){
 2f4:	9b 01       	movw	r18, r22
 2f6:	ac 01       	movw	r20, r24
	int compareValue = (int)(60.0*F_CPU/prescale_c/microstep_c/stepsperrot_c/rpm);
	OCR1B = compareValue;
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	7c e7       	ldi	r23, 0x7C	; 124
 2fc:	82 e1       	ldi	r24, 0x12	; 18
 2fe:	96 e4       	ldi	r25, 0x46	; 70
 300:	0e 94 2e 04 	call	0x85c	; 0x85c <__divsf3>
 304:	0e 94 96 04 	call	0x92c	; 0x92c <__fixsfsi>
 308:	70 93 8b 00 	sts	0x008B, r23
 30c:	60 93 8a 00 	sts	0x008A, r22
}
 310:	08 95       	ret

00000312 <_Z19setCarriageVelocityd>:

void setCarriageVelocity(double metersPerSecond){
 312:	9b 01       	movw	r18, r22
 314:	ac 01       	movw	r20, r24
	//USART0Number((int)(metersPerSecond*100000.0));
	//USART0SendByte('\n');
	int compareValue = (int)((double)F_CPU/prescale_c/microstep_c/stepsperrot_c/rotpermeter_c/metersPerSecond);
	OCR1B = compareValue;
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	88 e4       	ldi	r24, 0x48	; 72
 31c:	9f e3       	ldi	r25, 0x3F	; 63
 31e:	0e 94 2e 04 	call	0x85c	; 0x85c <__divsf3>
 322:	0e 94 96 04 	call	0x92c	; 0x92c <__fixsfsi>
 326:	70 93 8b 00 	sts	0x008B, r23
 32a:	60 93 8a 00 	sts	0x008A, r22
}
 32e:	08 95       	ret

00000330 <_Z19getCarriageDistancev>:

double getCarriageDistance(){
 330:	20 91 10 01 	lds	r18, 0x0110
 334:	30 91 11 01 	lds	r19, 0x0111
 338:	40 91 12 01 	lds	r20, 0x0112
 33c:	50 91 13 01 	lds	r21, 0x0113
 340:	60 91 14 01 	lds	r22, 0x0114
 344:	70 91 15 01 	lds	r23, 0x0115
 348:	80 91 16 01 	lds	r24, 0x0116
 34c:	90 91 17 01 	lds	r25, 0x0117
 350:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatdisf>
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	48 e4       	ldi	r20, 0x48	; 72
 35a:	53 e4       	ldi	r21, 0x43	; 67
 35c:	0e 94 2e 04 	call	0x85c	; 0x85c <__divsf3>
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	40 e0       	ldi	r20, 0x00	; 0
 366:	5e e3       	ldi	r21, 0x3E	; 62
 368:	0e 94 cb 05 	call	0xb96	; 0xb96 <__mulsf3>
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	48 e4       	ldi	r20, 0x48	; 72
 372:	53 e4       	ldi	r21, 0x43	; 67
 374:	0e 94 2e 04 	call	0x85c	; 0x85c <__divsf3>
	return (double)steps_carriage/stepsperrot_c/microstep_c/rotpermeter_c;
}
 378:	08 95       	ret

0000037a <_Z20setCarriageDirectionb>:

void setCarriageDirection(bool direction){
	if(direction){
 37a:	88 23       	and	r24, r24
 37c:	11 f0       	breq	.+4      	; 0x382 <_Z20setCarriageDirectionb+0x8>
		PORTB |= (1 << carriageDirPin);
 37e:	28 9a       	sbi	0x05, 0	; 5
 380:	01 c0       	rjmp	.+2      	; 0x384 <_Z20setCarriageDirectionb+0xa>
	}else{
		PORTB &= ~(1 << carriageDirPin);
 382:	28 98       	cbi	0x05, 0	; 5
	}
	carriageDirection = direction;
 384:	80 93 18 01 	sts	0x0118, r24
}
 388:	08 95       	ret

0000038a <_Z10USART0Initv>:


void USART0Init(void){
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
 38a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)UBRR_VALUE;
 38e:	87 e6       	ldi	r24, 0x67	; 103
 390:	80 93 c4 00 	sts	0x00C4, r24
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 394:	e2 ec       	ldi	r30, 0xC2	; 194
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	86 60       	ori	r24, 0x06	; 6
 39c:	80 83       	st	Z, r24
	//enable transmission and reception
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 39e:	e1 ec       	ldi	r30, 0xC1	; 193
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	88 61       	ori	r24, 0x18	; 24
 3a6:	80 83       	st	Z, r24
}
 3a8:	08 95       	ret

000003aa <_Z14USART0SendByteh>:
void USART0SendByte(uint8_t u8Data){
 3aa:	98 2f       	mov	r25, r24
	//wait while previous byte is completed
	while(!(UCSR0A&(1<<UDRE0))){};
 3ac:	80 91 c0 00 	lds	r24, 0x00C0
 3b0:	85 ff       	sbrs	r24, 5
 3b2:	fc cf       	rjmp	.-8      	; 0x3ac <_Z14USART0SendByteh+0x2>
	// Transmit data
	UDR0 = u8Data;
 3b4:	90 93 c6 00 	sts	0x00C6, r25
}
 3b8:	08 95       	ret

000003ba <_Z17USART0ReceiveBytev>:

uint8_t USART0ReceiveByte(){
	// Wait for byte to be received
	while(!(UCSR0A&(1<<RXC0))){};
 3ba:	80 91 c0 00 	lds	r24, 0x00C0
 3be:	87 ff       	sbrs	r24, 7
 3c0:	fc cf       	rjmp	.-8      	; 0x3ba <_Z17USART0ReceiveBytev>
	// Return received data
	return UDR0;
 3c2:	80 91 c6 00 	lds	r24, 0x00C6
}
 3c6:	08 95       	ret

000003c8 <_Z5setupv>:
	USART0String(snum);
}


void setup(void){ 
	DDRB |= (1 << carriageStepPin)|(1 << spindleStepPin)|(1 << carriageDisablePin)|(1 << spindleDirPin)|(1 << carriageDirPin); // Set step pin as output
 3c8:	84 b1       	in	r24, 0x04	; 4
 3ca:	8f 61       	ori	r24, 0x1F	; 31
 3cc:	84 b9       	out	0x04, r24	; 4
	DDRD = 0; //set all pins as inputs
 3ce:	1a b8       	out	0x0a, r1	; 10
	//PORTD = 0xFF;
	DDRD |= (1 << spindleDisablePin); //except for spindleDisable
 3d0:	53 9a       	sbi	0x0a, 3	; 10
	TCCR1B = 0b0011; //set the timer1 prescaler to 64 (bit 3 for CTC) <- p.137 of doc8161
 3d2:	83 e0       	ldi	r24, 0x03	; 3
 3d4:	80 93 81 00 	sts	0x0081, r24
	// 1 / ( (16000000/64) / (2^8) ) * 1000 = 1.024ms
	//         ^cpu   ^prescale ^bits = 976,562 hertz
	
	TCCR0B = 0b0011; //fcpu/64 - not a 16 bit timer - different prescale table
 3d8:	85 bd       	out	0x25, r24	; 37
	
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B); //enable compA, compB for timer2
 3da:	ef e6       	ldi	r30, 0x6F	; 111
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	86 60       	ori	r24, 0x06	; 6
 3e2:	80 83       	st	Z, r24
	TIMSK0 |= (1 << OCIE0A)|(1<<OCIE0B); //compA, compB timer 0
 3e4:	ee e6       	ldi	r30, 0x6E	; 110
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	86 60       	ori	r24, 0x06	; 6
 3ec:	80 83       	st	Z, r24
	
	TCNT1 = 0; //reset and init counter
 3ee:	10 92 85 00 	sts	0x0085, r1
 3f2:	10 92 84 00 	sts	0x0084, r1
	TCNT0 = 0;
 3f6:	16 bc       	out	0x26, r1	; 38
	
	int spindleStepCompare = (int)ceil(((double)F_CPU*steppulse_us)/(1000000.0*prescale_s)); //how long should we keep the step pin on every pulse?
	OCR0A = spindleStepCompare;
 3f8:	88 e5       	ldi	r24, 0x58	; 88
 3fa:	87 bd       	out	0x27, r24	; 39
	
	int carriageStepCompare = (int)ceil(((double)F_CPU*steppulse_us)/(1000000.0*prescale_c));
	OCR1A = carriageStepCompare;
 3fc:	88 e5       	ldi	r24, 0x58	; 88
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	90 93 89 00 	sts	0x0089, r25
 404:	80 93 88 00 	sts	0x0088, r24
	
	PORTB |= (1 << carriageDisablePin); //disable on start up
 408:	29 9a       	sbi	0x05, 1	; 5
	PORTD |= (1 << spindleDisablePin);
 40a:	5b 9a       	sbi	0x0b, 3	; 11

void setCarriageDirection(bool direction){
	if(direction){
		PORTB |= (1 << carriageDirPin);
	}else{
		PORTB &= ~(1 << carriageDirPin);
 40c:	28 98       	cbi	0x05, 0	; 5
	}
	carriageDirection = direction;
 40e:	10 92 18 01 	sts	0x0118, r1
	
	PORTB |= (1 << carriageDisablePin); //disable on start up
	PORTD |= (1 << spindleDisablePin);
	
	setCarriageDirection(0);
	USART0Init();
 412:	0e 94 c5 01 	call	0x38a	; 0x38a <_Z10USART0Initv>
	
	//sei(); //  Enable global interrupts
	//F_CPU/prescale/OCR1A/stepsperrot/microstep/rotpermeter  = meter/sec
	//   steps/sec            |    rot/sec  |  meter/sec
}
 416:	08 95       	ret

00000418 <_Z10disableAllv>:

void disableAll(){
	cli();
 418:	f8 94       	cli
	PORTB |= (1 << carriageDisablePin);
 41a:	29 9a       	sbi	0x05, 1	; 5
	PORTD |= (1 << spindleDisablePin);
 41c:	5b 9a       	sbi	0x0b, 3	; 11
}
 41e:	08 95       	ret

00000420 <_Z11getFarLimitv>:

bool getFarLimit(){
	int buttons = PIND;
 420:	89 b1       	in	r24, 0x09	; 9
 422:	28 2f       	mov	r18, r24
 424:	30 e0       	ldi	r19, 0x00	; 0
	bool outsideLimit = !(buttons & (1 << limitFar))==0;
	bool closeLimit = !(buttons & (1 << limitClose))==0;
	//bool blackButton = (buttons & (1 << rewindButton))==0;
	//bool redButton = (buttons & (1 << startButton))==0;
	if(carriageDirection){
 426:	80 91 18 01 	lds	r24, 0x0118
 42a:	88 23       	and	r24, r24
 42c:	39 f0       	breq	.+14     	; 0x43c <_Z11getFarLimitv+0x1c>
}

bool getFarLimit(){
	int buttons = PIND;
	bool outsideLimit = !(buttons & (1 << limitFar))==0;
	bool closeLimit = !(buttons & (1 << limitClose))==0;
 42e:	36 95       	lsr	r19
 430:	27 95       	ror	r18
 432:	36 95       	lsr	r19
 434:	27 95       	ror	r18
 436:	82 2f       	mov	r24, r18
 438:	81 70       	andi	r24, 0x01	; 1
 43a:	08 95       	ret
	PORTD |= (1 << spindleDisablePin);
}

bool getFarLimit(){
	int buttons = PIND;
	bool outsideLimit = !(buttons & (1 << limitFar))==0;
 43c:	85 e0       	ldi	r24, 0x05	; 5
 43e:	36 95       	lsr	r19
 440:	27 95       	ror	r18
 442:	8a 95       	dec	r24
 444:	e1 f7       	brne	.-8      	; 0x43e <_Z11getFarLimitv+0x1e>
 446:	82 2f       	mov	r24, r18
 448:	81 70       	andi	r24, 0x01	; 1
		return closeLimit;
	}else{
		return outsideLimit;
	}

}
 44a:	08 95       	ret

0000044c <_Z12getRedButtonv>:

bool getRedButton(){
	int buttons = PIND;
 44c:	89 b1       	in	r24, 0x09	; 9
 44e:	80 95       	com	r24
	//bool outsideLimit = !(buttons & (1 << limitFar))==0;
	//bool closeLimit = !(buttons & (1 << limitClose))==0;
	//bool blackButton = (buttons & (1 << rewindButton))==0;
	bool redButton = (buttons & (1 << startButton))==0;
	return redButton;
}
 450:	88 1f       	adc	r24, r24
 452:	88 27       	eor	r24, r24
 454:	88 1f       	adc	r24, r24
 456:	08 95       	ret

00000458 <_Z14getBlackButtonv>:

bool getBlackButton(){
	int buttons = PIND;
 458:	89 b1       	in	r24, 0x09	; 9
 45a:	82 95       	swap	r24
 45c:	86 95       	lsr	r24
 45e:	86 95       	lsr	r24
 460:	83 70       	andi	r24, 0x03	; 3
 462:	80 95       	com	r24
	//bool outsideLimit = !(buttons & (1 << limitFar))==0;
	//bool closeLimit = !(buttons & (1 << limitClose))==0;
	bool blackButton = (buttons & (1 << rewindButton))==0;
	//bool redButton = (buttons & (1 << startButton))==0;
	return blackButton;
}
 464:	81 70       	andi	r24, 0x01	; 1
 466:	08 95       	ret

00000468 <_Z14rewindCarriagev>:

void rewindCarriage(){
	sei();
 468:	78 94       	sei
	PORTD |= (1 << spindleDisablePin); //disable spindle
 46a:	5b 9a       	sbi	0x0b, 3	; 11
	PORTB &= ~(1 << carriageDisablePin);
 46c:	29 98       	cbi	0x05, 1	; 5
	return (double)steps_carriage/stepsperrot_c/microstep_c/rotpermeter_c;
}

void setCarriageDirection(bool direction){
	if(direction){
		PORTB |= (1 << carriageDirPin);
 46e:	28 9a       	sbi	0x05, 0	; 5
	}else{
		PORTB &= ~(1 << carriageDirPin);
	}
	carriageDirection = direction;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	80 93 18 01 	sts	0x0118, r24
	PORTB &= ~(1 << carriageDisablePin);
	
	setCarriageDirection(1);

	//setCarriageRPM(maxrpm_c);
	setCarriageVelocity(0.005);
 476:	6a e0       	ldi	r22, 0x0A	; 10
 478:	77 ed       	ldi	r23, 0xD7	; 215
 47a:	83 ea       	ldi	r24, 0xA3	; 163
 47c:	9b e3       	ldi	r25, 0x3B	; 59
 47e:	0e 94 89 01 	call	0x312	; 0x312 <_Z19setCarriageVelocityd>
	int buttons = PIND;
	bool outsideLimit = !(buttons & (1 << limitFar))==0;
	bool closeLimit = !(buttons & (1 << limitClose))==0;
	//bool blackButton = (buttons & (1 << rewindButton))==0;
	//bool redButton = (buttons & (1 << startButton))==0;
	if(carriageDirection){
 482:	40 91 18 01 	lds	r20, 0x0118
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 486:	20 ea       	ldi	r18, 0xA0	; 160
 488:	3f e0       	ldi	r19, 0x0F	; 15
	PORTB |= (1 << carriageDisablePin);
	PORTD |= (1 << spindleDisablePin);
}

bool getFarLimit(){
	int buttons = PIND;
 48a:	89 b1       	in	r24, 0x09	; 9
 48c:	90 e0       	ldi	r25, 0x00	; 0
	bool outsideLimit = !(buttons & (1 << limitFar))==0;
	bool closeLimit = !(buttons & (1 << limitClose))==0;
	//bool blackButton = (buttons & (1 << rewindButton))==0;
	//bool redButton = (buttons & (1 << startButton))==0;
	if(carriageDirection){
 48e:	44 23       	and	r20, r20
 490:	29 f0       	breq	.+10     	; 0x49c <_Z14rewindCarriagev+0x34>
}

bool getFarLimit(){
	int buttons = PIND;
	bool outsideLimit = !(buttons & (1 << limitFar))==0;
	bool closeLimit = !(buttons & (1 << limitClose))==0;
 492:	96 95       	lsr	r25
 494:	87 95       	ror	r24
 496:	96 95       	lsr	r25
 498:	87 95       	ror	r24
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <_Z14rewindCarriagev+0x3e>
	PORTD |= (1 << spindleDisablePin);
}

bool getFarLimit(){
	int buttons = PIND;
	bool outsideLimit = !(buttons & (1 << limitFar))==0;
 49c:	55 e0       	ldi	r21, 0x05	; 5
 49e:	96 95       	lsr	r25
 4a0:	87 95       	ror	r24
 4a2:	5a 95       	dec	r21
 4a4:	e1 f7       	brne	.-8      	; 0x49e <_Z14rewindCarriagev+0x36>
 4a6:	81 70       	andi	r24, 0x01	; 1
	
	setCarriageDirection(1);

	//setCarriageRPM(maxrpm_c);
	setCarriageVelocity(0.005);
	while(!getFarLimit() && !getRedButton()){
 4a8:	31 f4       	brne	.+12     	; 0x4b6 <_Z14rewindCarriagev+0x4e>
 4aa:	4f 9b       	sbis	0x09, 7	; 9
 4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <_Z14rewindCarriagev+0x4e>
 4ae:	c9 01       	movw	r24, r18
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <_Z14rewindCarriagev+0x48>
 4b4:	ea cf       	rjmp	.-44     	; 0x48a <_Z14rewindCarriagev+0x22>
	//F_CPU/prescale/OCR1A/stepsperrot/microstep/rotpermeter  = meter/sec
	//   steps/sec            |    rot/sec  |  meter/sec
}

void disableAll(){
	cli();
 4b6:	f8 94       	cli
	PORTB |= (1 << carriageDisablePin);
 4b8:	29 9a       	sbi	0x05, 1	; 5
	PORTD |= (1 << spindleDisablePin);
 4ba:	5b 9a       	sbi	0x0b, 3	; 11
	setCarriageVelocity(0.005);
	while(!getFarLimit() && !getRedButton()){
		_delay_ms(1);
	}
	disableAll();
}
 4bc:	08 95       	ret

000004be <_Z12USART0StringPc>:
	while(!(UCSR0A&(1<<RXC0))){};
	// Return received data
	return UDR0;
}

void USART0String(char* blah){
 4be:	ac 01       	movw	r20, r24
	int length = strlen(blah);
 4c0:	dc 01       	movw	r26, r24
 4c2:	0d 90       	ld	r0, X+
 4c4:	00 20       	and	r0, r0
 4c6:	e9 f7       	brne	.-6      	; 0x4c2 <_Z12USART0StringPc+0x4>
 4c8:	11 97       	sbiw	r26, 0x01	; 1
 4ca:	a8 1b       	sub	r26, r24
 4cc:	b9 0b       	sbc	r27, r25
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	0c c0       	rjmp	.+24     	; 0x4ec <_Z12USART0StringPc+0x2e>
	for(int i=0; i<length; i++){
		USART0SendByte(blah[i]);
 4d4:	fa 01       	movw	r30, r20
 4d6:	e2 0f       	add	r30, r18
 4d8:	f3 1f       	adc	r31, r19
 4da:	e0 81       	ld	r30, Z
	//enable transmission and reception
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
}
void USART0SendByte(uint8_t u8Data){
	//wait while previous byte is completed
	while(!(UCSR0A&(1<<UDRE0))){};
 4dc:	80 91 c0 00 	lds	r24, 0x00C0
 4e0:	85 ff       	sbrs	r24, 5
 4e2:	fc cf       	rjmp	.-8      	; 0x4dc <_Z12USART0StringPc+0x1e>
	// Transmit data
	UDR0 = u8Data;
 4e4:	e0 93 c6 00 	sts	0x00C6, r30
	return UDR0;
}

void USART0String(char* blah){
	int length = strlen(blah);
	for(int i=0; i<length; i++){
 4e8:	2f 5f       	subi	r18, 0xFF	; 255
 4ea:	3f 4f       	sbci	r19, 0xFF	; 255
 4ec:	2a 17       	cp	r18, r26
 4ee:	3b 07       	cpc	r19, r27
 4f0:	8c f3       	brlt	.-30     	; 0x4d4 <_Z12USART0StringPc+0x16>
		USART0SendByte(blah[i]);
	}
}
 4f2:	08 95       	ret

000004f4 <_Z12USART0Numberi>:

void USART0Number(int number){
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
 4f8:	df 93       	push	r29
 4fa:	cf 93       	push	r28
 4fc:	00 d0       	rcall	.+0      	; 0x4fe <_Z12USART0Numberi+0xa>
 4fe:	00 d0       	rcall	.+0      	; 0x500 <_Z12USART0Numberi+0xc>
 500:	0f 92       	push	r0
 502:	cd b7       	in	r28, 0x3d	; 61
 504:	de b7       	in	r29, 0x3e	; 62
	char snum[5];

	// convert 123 to string [buf]
	itoa(number, snum, 10);
 506:	8e 01       	movw	r16, r28
 508:	0f 5f       	subi	r16, 0xFF	; 255
 50a:	1f 4f       	sbci	r17, 0xFF	; 255
 50c:	b8 01       	movw	r22, r16
 50e:	4a e0       	ldi	r20, 0x0A	; 10
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	0e 94 bb 06 	call	0xd76	; 0xd76 <itoa>
	USART0String(snum);
 516:	c8 01       	movw	r24, r16
 518:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12USART0StringPc>
}
 51c:	0f 90       	pop	r0
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	cf 91       	pop	r28
 528:	df 91       	pop	r29
 52a:	1f 91       	pop	r17
 52c:	0f 91       	pop	r16
 52e:	08 95       	ret

00000530 <_Z11newVelocitydd>:

long long steps_spindle = 0;
long long steps_carriage = 0;
bool carriageDirection = false;

double newVelocity(double meters, double angularVelocity){
 530:	af 92       	push	r10
 532:	bf 92       	push	r11
 534:	cf 92       	push	r12
 536:	df 92       	push	r13
 538:	ef 92       	push	r14
 53a:	ff 92       	push	r15
 53c:	0f 93       	push	r16
 53e:	1f 93       	push	r17
 540:	59 01       	movw	r10, r18
 542:	6a 01       	movw	r12, r20
	double dtheta_dx=(((maxDensity*(1.0-abs(b)))/(1.0+b*cos((2.0*M_PI*meters)/l)))-lambda10)*(1.0/lambda20);
 544:	2b ed       	ldi	r18, 0xDB	; 219
 546:	3f e0       	ldi	r19, 0x0F	; 15
 548:	49 ec       	ldi	r20, 0xC9	; 201
 54a:	50 e4       	ldi	r21, 0x40	; 64
 54c:	0e 94 cb 05 	call	0xb96	; 0xb96 <__mulsf3>
 550:	2a e9       	ldi	r18, 0x9A	; 154
 552:	39 e9       	ldi	r19, 0x99	; 153
 554:	49 e1       	ldi	r20, 0x19	; 25
 556:	5f e3       	ldi	r21, 0x3F	; 63
 558:	0e 94 2e 04 	call	0x85c	; 0x85c <__divsf3>
 55c:	0e 94 2b 04 	call	0x856	; 0x856 <cos>
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	40 e0       	ldi	r20, 0x00	; 0
 566:	50 e0       	ldi	r21, 0x00	; 0
 568:	0e 94 cb 05 	call	0xb96	; 0xb96 <__mulsf3>
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	40 e8       	ldi	r20, 0x80	; 128
 572:	5f e3       	ldi	r21, 0x3F	; 63
 574:	0e 94 c3 03 	call	0x786	; 0x786 <__addsf3>
 578:	9b 01       	movw	r18, r22
 57a:	ac 01       	movw	r20, r24
 57c:	66 ea       	ldi	r22, 0xA6	; 166
 57e:	71 e6       	ldi	r23, 0x61	; 97
 580:	88 e7       	ldi	r24, 0x78	; 120
 582:	9c e3       	ldi	r25, 0x3C	; 60
 584:	0e 94 2e 04 	call	0x85c	; 0x85c <__divsf3>
 588:	2c ea       	ldi	r18, 0xAC	; 172
 58a:	35 ec       	ldi	r19, 0xC5	; 197
 58c:	47 ea       	ldi	r20, 0xA7	; 167
 58e:	5a e3       	ldi	r21, 0x3A	; 58
 590:	0e 94 c2 03 	call	0x784	; 0x784 <__subsf3>
 594:	29 ec       	ldi	r18, 0xC9	; 201
 596:	30 e5       	ldi	r19, 0x50	; 80
 598:	4f ea       	ldi	r20, 0xAF	; 175
 59a:	54 e4       	ldi	r21, 0x44	; 68
 59c:	0e 94 cb 05 	call	0xb96	; 0xb96 <__mulsf3>
 5a0:	9b 01       	movw	r18, r22
 5a2:	ac 01       	movw	r20, r24
	dtheta_dx = dtheta_dx*dtheta_dx-1.0;
 5a4:	0e 94 cb 05 	call	0xb96	; 0xb96 <__mulsf3>
	dtheta_dx = sqrt(dtheta_dx)/r;
 5a8:	20 e0       	ldi	r18, 0x00	; 0
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	40 e8       	ldi	r20, 0x80	; 128
 5ae:	5f e3       	ldi	r21, 0x3F	; 63
 5b0:	0e 94 c2 03 	call	0x784	; 0x784 <__subsf3>
 5b4:	0e 94 32 06 	call	0xc64	; 0xc64 <sqrt>
 5b8:	2c ea       	ldi	r18, 0xAC	; 172
 5ba:	35 ec       	ldi	r19, 0xC5	; 197
 5bc:	47 ea       	ldi	r20, 0xA7	; 167
 5be:	5a e3       	ldi	r21, 0x3A	; 58
 5c0:	0e 94 2e 04 	call	0x85c	; 0x85c <__divsf3>
 5c4:	7b 01       	movw	r14, r22
 5c6:	8c 01       	movw	r16, r24
	//char str[20];
	//snprintf(str,20,"%d,",(int)(dtheta_dx));
	//USART0String(str);
	
	if (dtheta_dx > 0.0){
 5c8:	20 e0       	ldi	r18, 0x00	; 0
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	40 e0       	ldi	r20, 0x00	; 0
 5ce:	50 e0       	ldi	r21, 0x00	; 0
 5d0:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__gesf2>
 5d4:	18 16       	cp	r1, r24
 5d6:	2c f0       	brlt	.+10     	; 0x5e2 <_Z11newVelocitydd+0xb2>
 5d8:	e0 e0       	ldi	r30, 0x00	; 0
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	08 c0       	rjmp	.+16     	; 0x5f2 <_Z11newVelocitydd+0xc2>
		double velocity = angularVelocity/dtheta_dx;
 5e2:	c6 01       	movw	r24, r12
 5e4:	b5 01       	movw	r22, r10
 5e6:	a8 01       	movw	r20, r16
 5e8:	97 01       	movw	r18, r14
 5ea:	0e 94 2e 04 	call	0x85c	; 0x85c <__divsf3>
 5ee:	e6 2f       	mov	r30, r22
 5f0:	69 2f       	mov	r22, r25
		return velocity;
	}else{
		return 0.0;
	}
}
 5f2:	2e 2f       	mov	r18, r30
 5f4:	37 2f       	mov	r19, r23
 5f6:	48 2f       	mov	r20, r24
 5f8:	56 2f       	mov	r21, r22
 5fa:	b9 01       	movw	r22, r18
 5fc:	ca 01       	movw	r24, r20
 5fe:	1f 91       	pop	r17
 600:	0f 91       	pop	r16
 602:	ff 90       	pop	r15
 604:	ef 90       	pop	r14
 606:	df 90       	pop	r13
 608:	cf 90       	pop	r12
 60a:	bf 90       	pop	r11
 60c:	af 90       	pop	r10
 60e:	08 95       	ret

00000610 <_Z10windStringv>:
		_delay_ms(1);
	}
	disableAll();
}

void windString(){
 610:	af 92       	push	r10
 612:	bf 92       	push	r11
 614:	cf 92       	push	r12
 616:	df 92       	push	r13
 618:	ef 92       	push	r14
 61a:	ff 92       	push	r15
 61c:	0f 93       	push	r16
 61e:	1f 93       	push	r17
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
	steps_carriage = 0;
 624:	10 92 10 01 	sts	0x0110, r1
 628:	10 92 11 01 	sts	0x0111, r1
 62c:	10 92 12 01 	sts	0x0112, r1
 630:	10 92 13 01 	sts	0x0113, r1
 634:	10 92 14 01 	sts	0x0114, r1
 638:	10 92 15 01 	sts	0x0115, r1
 63c:	10 92 16 01 	sts	0x0116, r1
 640:	10 92 17 01 	sts	0x0117, r1
	steps_spindle = 0;
 644:	10 92 08 01 	sts	0x0108, r1
 648:	10 92 09 01 	sts	0x0109, r1
 64c:	10 92 0a 01 	sts	0x010A, r1
 650:	10 92 0b 01 	sts	0x010B, r1
 654:	10 92 0c 01 	sts	0x010C, r1
 658:	10 92 0d 01 	sts	0x010D, r1
 65c:	10 92 0e 01 	sts	0x010E, r1
 660:	10 92 0f 01 	sts	0x010F, r1
	
	double dtheta_dt = angV(maxrpm_s);
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	88 ec       	ldi	r24, 0xC8	; 200
 66a:	92 e4       	ldi	r25, 0x42	; 66
 66c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_Z4angVd>
 670:	5b 01       	movw	r10, r22
 672:	6c 01       	movw	r12, r24
	setSpindleRPM(maxrpm_s);
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	88 ec       	ldi	r24, 0xC8	; 200
 67a:	92 e4       	ldi	r25, 0x42	; 66
 67c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_Z13setSpindleRPMd>
	double meters = 0.0;
	double velocity = 0.0;
	
	sei();
 680:	78 94       	sei

void setCarriageDirection(bool direction){
	if(direction){
		PORTB |= (1 << carriageDirPin);
	}else{
		PORTB &= ~(1 << carriageDirPin);
 682:	28 98       	cbi	0x05, 0	; 5
	}
	carriageDirection = direction;
 684:	10 92 18 01 	sts	0x0118, r1
	
	sei();
	
	setCarriageDirection(0);
	
	PORTB &= ~(1 << carriageDisablePin); //enable the steppers
 688:	29 98       	cbi	0x05, 1	; 5
	PORTD &= ~(1 << spindleDisablePin);
 68a:	5b 98       	cbi	0x0b, 3	; 11
 68c:	0f 2e       	mov	r0, r31
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	ef 2e       	mov	r14, r31
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	ff 2e       	mov	r15, r31
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	0f 2f       	mov	r16, r31
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	1f 2f       	mov	r17, r31
 69e:	f0 2d       	mov	r31, r0
 6a0:	c0 e2       	ldi	r28, 0x20	; 32
 6a2:	de e4       	ldi	r29, 0x4E	; 78
	
	while(meters < l && !getFarLimit() && !getBlackButton()){
 6a4:	c8 01       	movw	r24, r16
 6a6:	b7 01       	movw	r22, r14
 6a8:	2a e9       	ldi	r18, 0x9A	; 154
 6aa:	39 e9       	ldi	r19, 0x99	; 153
 6ac:	49 e1       	ldi	r20, 0x19	; 25
 6ae:	5f e3       	ldi	r21, 0x3F	; 63
 6b0:	0e 94 27 04 	call	0x84e	; 0x84e <__cmpsf2>
 6b4:	88 23       	and	r24, r24
 6b6:	24 f5       	brge	.+72     	; 0x700 <_Z10windStringv+0xf0>
	PORTB |= (1 << carriageDisablePin);
	PORTD |= (1 << spindleDisablePin);
}

bool getFarLimit(){
	int buttons = PIND;
 6b8:	89 b1       	in	r24, 0x09	; 9
 6ba:	28 2f       	mov	r18, r24
 6bc:	30 e0       	ldi	r19, 0x00	; 0
	bool outsideLimit = !(buttons & (1 << limitFar))==0;
	bool closeLimit = !(buttons & (1 << limitClose))==0;
	//bool blackButton = (buttons & (1 << rewindButton))==0;
	//bool redButton = (buttons & (1 << startButton))==0;
	if(carriageDirection){
 6be:	80 91 18 01 	lds	r24, 0x0118
 6c2:	88 23       	and	r24, r24
 6c4:	29 f0       	breq	.+10     	; 0x6d0 <_Z10windStringv+0xc0>
}

bool getFarLimit(){
	int buttons = PIND;
	bool outsideLimit = !(buttons & (1 << limitFar))==0;
	bool closeLimit = !(buttons & (1 << limitClose))==0;
 6c6:	36 95       	lsr	r19
 6c8:	27 95       	ror	r18
 6ca:	36 95       	lsr	r19
 6cc:	27 95       	ror	r18
 6ce:	05 c0       	rjmp	.+10     	; 0x6da <_Z10windStringv+0xca>
	PORTD |= (1 << spindleDisablePin);
}

bool getFarLimit(){
	int buttons = PIND;
	bool outsideLimit = !(buttons & (1 << limitFar))==0;
 6d0:	75 e0       	ldi	r23, 0x05	; 5
 6d2:	36 95       	lsr	r19
 6d4:	27 95       	ror	r18
 6d6:	7a 95       	dec	r23
 6d8:	e1 f7       	brne	.-8      	; 0x6d2 <_Z10windStringv+0xc2>
 6da:	82 2f       	mov	r24, r18
 6dc:	81 70       	andi	r24, 0x01	; 1
	setCarriageDirection(0);
	
	PORTB &= ~(1 << carriageDisablePin); //enable the steppers
	PORTD &= ~(1 << spindleDisablePin);
	
	while(meters < l && !getFarLimit() && !getBlackButton()){
 6de:	81 f4       	brne	.+32     	; 0x700 <_Z10windStringv+0xf0>
 6e0:	4e 9b       	sbis	0x09, 6	; 9
 6e2:	0e c0       	rjmp	.+28     	; 0x700 <_Z10windStringv+0xf0>
		meters = getCarriageDistance();
 6e4:	0e 94 98 01 	call	0x330	; 0x330 <_Z19getCarriageDistancev>
 6e8:	7b 01       	movw	r14, r22
 6ea:	8c 01       	movw	r16, r24
		velocity = newVelocity(meters, dtheta_dt);
 6ec:	a6 01       	movw	r20, r12
 6ee:	95 01       	movw	r18, r10
 6f0:	0e 94 98 02 	call	0x530	; 0x530 <_Z11newVelocitydd>
		setCarriageVelocity(velocity);
 6f4:	0e 94 89 01 	call	0x312	; 0x312 <_Z19setCarriageVelocityd>
 6f8:	ce 01       	movw	r24, r28
 6fa:	01 97       	sbiw	r24, 0x01	; 1
 6fc:	f1 f7       	brne	.-4      	; 0x6fa <_Z10windStringv+0xea>
 6fe:	d2 cf       	rjmp	.-92     	; 0x6a4 <_Z10windStringv+0x94>
	//F_CPU/prescale/OCR1A/stepsperrot/microstep/rotpermeter  = meter/sec
	//   steps/sec            |    rot/sec  |  meter/sec
}

void disableAll(){
	cli();
 700:	f8 94       	cli
	PORTB |= (1 << carriageDisablePin);
 702:	29 9a       	sbi	0x05, 1	; 5
	PORTD |= (1 << spindleDisablePin);
 704:	5b 9a       	sbi	0x0b, 3	; 11
		velocity = newVelocity(meters, dtheta_dt);
		setCarriageVelocity(velocity);
		_delay_ms(5);
	}
	disableAll();
}
 706:	df 91       	pop	r29
 708:	cf 91       	pop	r28
 70a:	1f 91       	pop	r17
 70c:	0f 91       	pop	r16
 70e:	ff 90       	pop	r15
 710:	ef 90       	pop	r14
 712:	df 90       	pop	r13
 714:	cf 90       	pop	r12
 716:	bf 90       	pop	r11
 718:	af 90       	pop	r10
 71a:	08 95       	ret

0000071c <main>:

int main (void){
 71c:	cf 93       	push	r28
 71e:	df 93       	push	r29
	setup();
 720:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_Z5setupv>
	//F_CPU/prescale/OCR1A/stepsperrot/microstep/rotpermeter  = meter/sec
	//   steps/sec            |    rot/sec  |  meter/sec
}

void disableAll(){
	cli();
 724:	f8 94       	cli
	PORTB |= (1 << carriageDisablePin);
 726:	29 9a       	sbi	0x05, 1	; 5
	PORTD |= (1 << spindleDisablePin);
 728:	5b 9a       	sbi	0x0b, 3	; 11
}

int main (void){
	setup();
	disableAll();
	USART0String("hello!\n");
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	91 e0       	ldi	r25, 0x01	; 1
 72e:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12USART0StringPc>
 732:	2a ef       	ldi	r18, 0xFA	; 250
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	c0 e9       	ldi	r28, 0x90	; 144
 738:	d1 e0       	ldi	r29, 0x01	; 1
 73a:	09 c0       	rjmp	.+18     	; 0x74e <main+0x32>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 73c:	ce 01       	movw	r24, r28
 73e:	01 97       	sbiw	r24, 0x01	; 1
 740:	f1 f7       	brne	.-4      	; 0x73e <main+0x22>
 742:	21 50       	subi	r18, 0x01	; 1
 744:	30 40       	sbci	r19, 0x00	; 0
 746:	03 c0       	rjmp	.+6      	; 0x74e <main+0x32>
 748:	2a ef       	ldi	r18, 0xFA	; 250
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	f7 cf       	rjmp	.-18     	; 0x73c <main+0x20>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 74e:	21 15       	cp	r18, r1
 750:	31 05       	cpc	r19, r1
 752:	a1 f7       	brne	.-24     	; 0x73c <main+0x20>
	while(1){
		_delay_ms(25);
		if (getBlackButton()){
 754:	4e 99       	sbic	0x09, 6	; 9
 756:	0a c0       	rjmp	.+20     	; 0x76c <main+0x50>
			//USART0String("rewinding.   ");
			rewindCarriage();
 758:	0e 94 34 02 	call	0x468	; 0x468 <_Z14rewindCarriagev>
 75c:	88 e8       	ldi	r24, 0x88	; 136
 75e:	93 e1       	ldi	r25, 0x13	; 19
 760:	fe 01       	movw	r30, r28
 762:	31 97       	sbiw	r30, 0x01	; 1
 764:	f1 f7       	brne	.-4      	; 0x762 <main+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 766:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 768:	d9 f7       	brne	.-10     	; 0x760 <main+0x44>
 76a:	ee cf       	rjmp	.-36     	; 0x748 <main+0x2c>
			_delay_ms(500);
		}else if (getRedButton()){
 76c:	4f 99       	sbic	0x09, 7	; 9
 76e:	ec cf       	rjmp	.-40     	; 0x748 <main+0x2c>
			//USART0String("winding.   ");
			windString();
 770:	0e 94 08 03 	call	0x610	; 0x610 <_Z10windStringv>
 774:	88 e8       	ldi	r24, 0x88	; 136
 776:	93 e1       	ldi	r25, 0x13	; 19
 778:	fe 01       	movw	r30, r28
 77a:	31 97       	sbiw	r30, 0x01	; 1
 77c:	f1 f7       	brne	.-4      	; 0x77a <main+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 77e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 780:	d9 f7       	brne	.-10     	; 0x778 <main+0x5c>
 782:	e2 cf       	rjmp	.-60     	; 0x748 <main+0x2c>

00000784 <__subsf3>:
 784:	50 58       	subi	r21, 0x80	; 128

00000786 <__addsf3>:
 786:	bb 27       	eor	r27, r27
 788:	aa 27       	eor	r26, r26
 78a:	0e d0       	rcall	.+28     	; 0x7a8 <__addsf3x>
 78c:	b5 c1       	rjmp	.+874    	; 0xaf8 <__fp_round>
 78e:	7e d1       	rcall	.+764    	; 0xa8c <__fp_pscA>
 790:	30 f0       	brcs	.+12     	; 0x79e <__addsf3+0x18>
 792:	83 d1       	rcall	.+774    	; 0xa9a <__fp_pscB>
 794:	20 f0       	brcs	.+8      	; 0x79e <__addsf3+0x18>
 796:	31 f4       	brne	.+12     	; 0x7a4 <__addsf3+0x1e>
 798:	9f 3f       	cpi	r25, 0xFF	; 255
 79a:	11 f4       	brne	.+4      	; 0x7a0 <__addsf3+0x1a>
 79c:	1e f4       	brtc	.+6      	; 0x7a4 <__addsf3+0x1e>
 79e:	63 c1       	rjmp	.+710    	; 0xa66 <__fp_nan>
 7a0:	0e f4       	brtc	.+2      	; 0x7a4 <__addsf3+0x1e>
 7a2:	e0 95       	com	r30
 7a4:	e7 fb       	bst	r30, 7
 7a6:	59 c1       	rjmp	.+690    	; 0xa5a <__fp_inf>

000007a8 <__addsf3x>:
 7a8:	e9 2f       	mov	r30, r25
 7aa:	c8 d1       	rcall	.+912    	; 0xb3c <__fp_split3>
 7ac:	80 f3       	brcs	.-32     	; 0x78e <__addsf3+0x8>
 7ae:	ba 17       	cp	r27, r26
 7b0:	62 07       	cpc	r22, r18
 7b2:	73 07       	cpc	r23, r19
 7b4:	84 07       	cpc	r24, r20
 7b6:	95 07       	cpc	r25, r21
 7b8:	18 f0       	brcs	.+6      	; 0x7c0 <__addsf3x+0x18>
 7ba:	71 f4       	brne	.+28     	; 0x7d8 <__addsf3x+0x30>
 7bc:	9e f5       	brtc	.+102    	; 0x824 <__addsf3x+0x7c>
 7be:	e0 c1       	rjmp	.+960    	; 0xb80 <__fp_zero>
 7c0:	0e f4       	brtc	.+2      	; 0x7c4 <__addsf3x+0x1c>
 7c2:	e0 95       	com	r30
 7c4:	0b 2e       	mov	r0, r27
 7c6:	ba 2f       	mov	r27, r26
 7c8:	a0 2d       	mov	r26, r0
 7ca:	0b 01       	movw	r0, r22
 7cc:	b9 01       	movw	r22, r18
 7ce:	90 01       	movw	r18, r0
 7d0:	0c 01       	movw	r0, r24
 7d2:	ca 01       	movw	r24, r20
 7d4:	a0 01       	movw	r20, r0
 7d6:	11 24       	eor	r1, r1
 7d8:	ff 27       	eor	r31, r31
 7da:	59 1b       	sub	r21, r25
 7dc:	99 f0       	breq	.+38     	; 0x804 <__addsf3x+0x5c>
 7de:	59 3f       	cpi	r21, 0xF9	; 249
 7e0:	50 f4       	brcc	.+20     	; 0x7f6 <__addsf3x+0x4e>
 7e2:	50 3e       	cpi	r21, 0xE0	; 224
 7e4:	68 f1       	brcs	.+90     	; 0x840 <__addsf3x+0x98>
 7e6:	1a 16       	cp	r1, r26
 7e8:	f0 40       	sbci	r31, 0x00	; 0
 7ea:	a2 2f       	mov	r26, r18
 7ec:	23 2f       	mov	r18, r19
 7ee:	34 2f       	mov	r19, r20
 7f0:	44 27       	eor	r20, r20
 7f2:	58 5f       	subi	r21, 0xF8	; 248
 7f4:	f3 cf       	rjmp	.-26     	; 0x7dc <__addsf3x+0x34>
 7f6:	46 95       	lsr	r20
 7f8:	37 95       	ror	r19
 7fa:	27 95       	ror	r18
 7fc:	a7 95       	ror	r26
 7fe:	f0 40       	sbci	r31, 0x00	; 0
 800:	53 95       	inc	r21
 802:	c9 f7       	brne	.-14     	; 0x7f6 <__addsf3x+0x4e>
 804:	7e f4       	brtc	.+30     	; 0x824 <__addsf3x+0x7c>
 806:	1f 16       	cp	r1, r31
 808:	ba 0b       	sbc	r27, r26
 80a:	62 0b       	sbc	r22, r18
 80c:	73 0b       	sbc	r23, r19
 80e:	84 0b       	sbc	r24, r20
 810:	ba f0       	brmi	.+46     	; 0x840 <__addsf3x+0x98>
 812:	91 50       	subi	r25, 0x01	; 1
 814:	a1 f0       	breq	.+40     	; 0x83e <__addsf3x+0x96>
 816:	ff 0f       	add	r31, r31
 818:	bb 1f       	adc	r27, r27
 81a:	66 1f       	adc	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	c2 f7       	brpl	.-16     	; 0x812 <__addsf3x+0x6a>
 822:	0e c0       	rjmp	.+28     	; 0x840 <__addsf3x+0x98>
 824:	ba 0f       	add	r27, r26
 826:	62 1f       	adc	r22, r18
 828:	73 1f       	adc	r23, r19
 82a:	84 1f       	adc	r24, r20
 82c:	48 f4       	brcc	.+18     	; 0x840 <__addsf3x+0x98>
 82e:	87 95       	ror	r24
 830:	77 95       	ror	r23
 832:	67 95       	ror	r22
 834:	b7 95       	ror	r27
 836:	f7 95       	ror	r31
 838:	9e 3f       	cpi	r25, 0xFE	; 254
 83a:	08 f0       	brcs	.+2      	; 0x83e <__addsf3x+0x96>
 83c:	b3 cf       	rjmp	.-154    	; 0x7a4 <__addsf3+0x1e>
 83e:	93 95       	inc	r25
 840:	88 0f       	add	r24, r24
 842:	08 f0       	brcs	.+2      	; 0x846 <__addsf3x+0x9e>
 844:	99 27       	eor	r25, r25
 846:	ee 0f       	add	r30, r30
 848:	97 95       	ror	r25
 84a:	87 95       	ror	r24
 84c:	08 95       	ret

0000084e <__cmpsf2>:
 84e:	e1 d0       	rcall	.+450    	; 0xa12 <__fp_cmp>
 850:	08 f4       	brcc	.+2      	; 0x854 <__cmpsf2+0x6>
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	08 95       	ret

00000856 <cos>:
 856:	29 d1       	rcall	.+594    	; 0xaaa <__fp_rempio2>
 858:	e3 95       	inc	r30
 85a:	5f c1       	rjmp	.+702    	; 0xb1a <__fp_sinus>

0000085c <__divsf3>:
 85c:	0c d0       	rcall	.+24     	; 0x876 <__divsf3x>
 85e:	4c c1       	rjmp	.+664    	; 0xaf8 <__fp_round>
 860:	1c d1       	rcall	.+568    	; 0xa9a <__fp_pscB>
 862:	40 f0       	brcs	.+16     	; 0x874 <__divsf3+0x18>
 864:	13 d1       	rcall	.+550    	; 0xa8c <__fp_pscA>
 866:	30 f0       	brcs	.+12     	; 0x874 <__divsf3+0x18>
 868:	21 f4       	brne	.+8      	; 0x872 <__divsf3+0x16>
 86a:	5f 3f       	cpi	r21, 0xFF	; 255
 86c:	19 f0       	breq	.+6      	; 0x874 <__divsf3+0x18>
 86e:	f5 c0       	rjmp	.+490    	; 0xa5a <__fp_inf>
 870:	51 11       	cpse	r21, r1
 872:	87 c1       	rjmp	.+782    	; 0xb82 <__fp_szero>
 874:	f8 c0       	rjmp	.+496    	; 0xa66 <__fp_nan>

00000876 <__divsf3x>:
 876:	62 d1       	rcall	.+708    	; 0xb3c <__fp_split3>
 878:	98 f3       	brcs	.-26     	; 0x860 <__divsf3+0x4>

0000087a <__divsf3_pse>:
 87a:	99 23       	and	r25, r25
 87c:	c9 f3       	breq	.-14     	; 0x870 <__divsf3+0x14>
 87e:	55 23       	and	r21, r21
 880:	b1 f3       	breq	.-20     	; 0x86e <__divsf3+0x12>
 882:	95 1b       	sub	r25, r21
 884:	55 0b       	sbc	r21, r21
 886:	bb 27       	eor	r27, r27
 888:	aa 27       	eor	r26, r26
 88a:	62 17       	cp	r22, r18
 88c:	73 07       	cpc	r23, r19
 88e:	84 07       	cpc	r24, r20
 890:	38 f0       	brcs	.+14     	; 0x8a0 <__divsf3_pse+0x26>
 892:	9f 5f       	subi	r25, 0xFF	; 255
 894:	5f 4f       	sbci	r21, 0xFF	; 255
 896:	22 0f       	add	r18, r18
 898:	33 1f       	adc	r19, r19
 89a:	44 1f       	adc	r20, r20
 89c:	aa 1f       	adc	r26, r26
 89e:	a9 f3       	breq	.-22     	; 0x88a <__divsf3_pse+0x10>
 8a0:	33 d0       	rcall	.+102    	; 0x908 <__stack+0x9>
 8a2:	0e 2e       	mov	r0, r30
 8a4:	3a f0       	brmi	.+14     	; 0x8b4 <__divsf3_pse+0x3a>
 8a6:	e0 e8       	ldi	r30, 0x80	; 128
 8a8:	30 d0       	rcall	.+96     	; 0x90a <__stack+0xb>
 8aa:	91 50       	subi	r25, 0x01	; 1
 8ac:	50 40       	sbci	r21, 0x00	; 0
 8ae:	e6 95       	lsr	r30
 8b0:	00 1c       	adc	r0, r0
 8b2:	ca f7       	brpl	.-14     	; 0x8a6 <__divsf3_pse+0x2c>
 8b4:	29 d0       	rcall	.+82     	; 0x908 <__stack+0x9>
 8b6:	fe 2f       	mov	r31, r30
 8b8:	27 d0       	rcall	.+78     	; 0x908 <__stack+0x9>
 8ba:	66 0f       	add	r22, r22
 8bc:	77 1f       	adc	r23, r23
 8be:	88 1f       	adc	r24, r24
 8c0:	bb 1f       	adc	r27, r27
 8c2:	26 17       	cp	r18, r22
 8c4:	37 07       	cpc	r19, r23
 8c6:	48 07       	cpc	r20, r24
 8c8:	ab 07       	cpc	r26, r27
 8ca:	b0 e8       	ldi	r27, 0x80	; 128
 8cc:	09 f0       	breq	.+2      	; 0x8d0 <__divsf3_pse+0x56>
 8ce:	bb 0b       	sbc	r27, r27
 8d0:	80 2d       	mov	r24, r0
 8d2:	bf 01       	movw	r22, r30
 8d4:	ff 27       	eor	r31, r31
 8d6:	93 58       	subi	r25, 0x83	; 131
 8d8:	5f 4f       	sbci	r21, 0xFF	; 255
 8da:	2a f0       	brmi	.+10     	; 0x8e6 <__divsf3_pse+0x6c>
 8dc:	9e 3f       	cpi	r25, 0xFE	; 254
 8de:	51 05       	cpc	r21, r1
 8e0:	68 f0       	brcs	.+26     	; 0x8fc <__divsf3_pse+0x82>
 8e2:	bb c0       	rjmp	.+374    	; 0xa5a <__fp_inf>
 8e4:	4e c1       	rjmp	.+668    	; 0xb82 <__fp_szero>
 8e6:	5f 3f       	cpi	r21, 0xFF	; 255
 8e8:	ec f3       	brlt	.-6      	; 0x8e4 <__divsf3_pse+0x6a>
 8ea:	98 3e       	cpi	r25, 0xE8	; 232
 8ec:	dc f3       	brlt	.-10     	; 0x8e4 <__divsf3_pse+0x6a>
 8ee:	86 95       	lsr	r24
 8f0:	77 95       	ror	r23
 8f2:	67 95       	ror	r22
 8f4:	b7 95       	ror	r27
 8f6:	f7 95       	ror	r31
 8f8:	9f 5f       	subi	r25, 0xFF	; 255
 8fa:	c9 f7       	brne	.-14     	; 0x8ee <__divsf3_pse+0x74>
 8fc:	88 0f       	add	r24, r24
 8fe:	91 1d       	adc	r25, r1
 900:	96 95       	lsr	r25
 902:	87 95       	ror	r24
 904:	97 f9       	bld	r25, 7
 906:	08 95       	ret
 908:	e1 e0       	ldi	r30, 0x01	; 1
 90a:	66 0f       	add	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	88 1f       	adc	r24, r24
 910:	bb 1f       	adc	r27, r27
 912:	62 17       	cp	r22, r18
 914:	73 07       	cpc	r23, r19
 916:	84 07       	cpc	r24, r20
 918:	ba 07       	cpc	r27, r26
 91a:	20 f0       	brcs	.+8      	; 0x924 <__stack+0x25>
 91c:	62 1b       	sub	r22, r18
 91e:	73 0b       	sbc	r23, r19
 920:	84 0b       	sbc	r24, r20
 922:	ba 0b       	sbc	r27, r26
 924:	ee 1f       	adc	r30, r30
 926:	88 f7       	brcc	.-30     	; 0x90a <__stack+0xb>
 928:	e0 95       	com	r30
 92a:	08 95       	ret

0000092c <__fixsfsi>:
 92c:	04 d0       	rcall	.+8      	; 0x936 <__fixunssfsi>
 92e:	68 94       	set
 930:	b1 11       	cpse	r27, r1
 932:	27 c1       	rjmp	.+590    	; 0xb82 <__fp_szero>
 934:	08 95       	ret

00000936 <__fixunssfsi>:
 936:	0a d1       	rcall	.+532    	; 0xb4c <__fp_splitA>
 938:	88 f0       	brcs	.+34     	; 0x95c <__fixunssfsi+0x26>
 93a:	9f 57       	subi	r25, 0x7F	; 127
 93c:	90 f0       	brcs	.+36     	; 0x962 <__fixunssfsi+0x2c>
 93e:	b9 2f       	mov	r27, r25
 940:	99 27       	eor	r25, r25
 942:	b7 51       	subi	r27, 0x17	; 23
 944:	a0 f0       	brcs	.+40     	; 0x96e <__fixunssfsi+0x38>
 946:	d1 f0       	breq	.+52     	; 0x97c <__fixunssfsi+0x46>
 948:	66 0f       	add	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	88 1f       	adc	r24, r24
 94e:	99 1f       	adc	r25, r25
 950:	1a f0       	brmi	.+6      	; 0x958 <__fixunssfsi+0x22>
 952:	ba 95       	dec	r27
 954:	c9 f7       	brne	.-14     	; 0x948 <__fixunssfsi+0x12>
 956:	12 c0       	rjmp	.+36     	; 0x97c <__fixunssfsi+0x46>
 958:	b1 30       	cpi	r27, 0x01	; 1
 95a:	81 f0       	breq	.+32     	; 0x97c <__fixunssfsi+0x46>
 95c:	11 d1       	rcall	.+546    	; 0xb80 <__fp_zero>
 95e:	b1 e0       	ldi	r27, 0x01	; 1
 960:	08 95       	ret
 962:	0e c1       	rjmp	.+540    	; 0xb80 <__fp_zero>
 964:	67 2f       	mov	r22, r23
 966:	78 2f       	mov	r23, r24
 968:	88 27       	eor	r24, r24
 96a:	b8 5f       	subi	r27, 0xF8	; 248
 96c:	39 f0       	breq	.+14     	; 0x97c <__fixunssfsi+0x46>
 96e:	b9 3f       	cpi	r27, 0xF9	; 249
 970:	cc f3       	brlt	.-14     	; 0x964 <__fixunssfsi+0x2e>
 972:	86 95       	lsr	r24
 974:	77 95       	ror	r23
 976:	67 95       	ror	r22
 978:	b3 95       	inc	r27
 97a:	d9 f7       	brne	.-10     	; 0x972 <__fixunssfsi+0x3c>
 97c:	3e f4       	brtc	.+14     	; 0x98c <__fixunssfsi+0x56>
 97e:	90 95       	com	r25
 980:	80 95       	com	r24
 982:	70 95       	com	r23
 984:	61 95       	neg	r22
 986:	7f 4f       	sbci	r23, 0xFF	; 255
 988:	8f 4f       	sbci	r24, 0xFF	; 255
 98a:	9f 4f       	sbci	r25, 0xFF	; 255
 98c:	08 95       	ret

0000098e <__floatdisf>:
 98e:	97 fb       	bst	r25, 7
 990:	0e f4       	brtc	.+2      	; 0x994 <__floatdisf+0x6>
 992:	6c d0       	rcall	.+216    	; 0xa6c <__fp_negdi>
 994:	01 c0       	rjmp	.+2      	; 0x998 <__fp_di2sf>

00000996 <__floatundisf>:
 996:	e8 94       	clt

00000998 <__fp_di2sf>:
 998:	f9 2f       	mov	r31, r25
 99a:	96 eb       	ldi	r25, 0xB6	; 182
 99c:	ff 23       	and	r31, r31
 99e:	81 f0       	breq	.+32     	; 0x9c0 <__fp_di2sf+0x28>
 9a0:	12 16       	cp	r1, r18
 9a2:	13 06       	cpc	r1, r19
 9a4:	14 06       	cpc	r1, r20
 9a6:	44 0b       	sbc	r20, r20
 9a8:	93 95       	inc	r25
 9aa:	f6 95       	lsr	r31
 9ac:	87 95       	ror	r24
 9ae:	77 95       	ror	r23
 9b0:	67 95       	ror	r22
 9b2:	57 95       	ror	r21
 9b4:	40 40       	sbci	r20, 0x00	; 0
 9b6:	ff 23       	and	r31, r31
 9b8:	b9 f7       	brne	.-18     	; 0x9a8 <__fp_di2sf+0x10>
 9ba:	1b c0       	rjmp	.+54     	; 0x9f2 <__fp_di2sf+0x5a>
 9bc:	99 27       	eor	r25, r25
 9be:	08 95       	ret
 9c0:	88 23       	and	r24, r24
 9c2:	51 f4       	brne	.+20     	; 0x9d8 <__fp_di2sf+0x40>
 9c4:	98 50       	subi	r25, 0x08	; 8
 9c6:	d2 f7       	brpl	.-12     	; 0x9bc <__fp_di2sf+0x24>
 9c8:	87 2b       	or	r24, r23
 9ca:	76 2f       	mov	r23, r22
 9cc:	65 2f       	mov	r22, r21
 9ce:	54 2f       	mov	r21, r20
 9d0:	43 2f       	mov	r20, r19
 9d2:	32 2f       	mov	r19, r18
 9d4:	20 e0       	ldi	r18, 0x00	; 0
 9d6:	b1 f3       	breq	.-20     	; 0x9c4 <__fp_di2sf+0x2c>
 9d8:	12 16       	cp	r1, r18
 9da:	13 06       	cpc	r1, r19
 9dc:	14 06       	cpc	r1, r20
 9de:	44 0b       	sbc	r20, r20
 9e0:	88 23       	and	r24, r24
 9e2:	3a f0       	brmi	.+14     	; 0x9f2 <__fp_di2sf+0x5a>
 9e4:	9a 95       	dec	r25
 9e6:	44 0f       	add	r20, r20
 9e8:	55 1f       	adc	r21, r21
 9ea:	66 1f       	adc	r22, r22
 9ec:	77 1f       	adc	r23, r23
 9ee:	88 1f       	adc	r24, r24
 9f0:	ca f7       	brpl	.-14     	; 0x9e4 <__fp_di2sf+0x4c>
 9f2:	55 23       	and	r21, r21
 9f4:	4a f4       	brpl	.+18     	; 0xa08 <__fp_di2sf+0x70>
 9f6:	44 0f       	add	r20, r20
 9f8:	55 1f       	adc	r21, r21
 9fa:	11 f4       	brne	.+4      	; 0xa00 <__fp_di2sf+0x68>
 9fc:	60 ff       	sbrs	r22, 0
 9fe:	04 c0       	rjmp	.+8      	; 0xa08 <__fp_di2sf+0x70>
 a00:	6f 5f       	subi	r22, 0xFF	; 255
 a02:	7f 4f       	sbci	r23, 0xFF	; 255
 a04:	8f 4f       	sbci	r24, 0xFF	; 255
 a06:	9f 4f       	sbci	r25, 0xFF	; 255
 a08:	88 0f       	add	r24, r24
 a0a:	96 95       	lsr	r25
 a0c:	87 95       	ror	r24
 a0e:	97 f9       	bld	r25, 7
 a10:	08 95       	ret

00000a12 <__fp_cmp>:
 a12:	99 0f       	add	r25, r25
 a14:	00 08       	sbc	r0, r0
 a16:	55 0f       	add	r21, r21
 a18:	aa 0b       	sbc	r26, r26
 a1a:	e0 e8       	ldi	r30, 0x80	; 128
 a1c:	fe ef       	ldi	r31, 0xFE	; 254
 a1e:	16 16       	cp	r1, r22
 a20:	17 06       	cpc	r1, r23
 a22:	e8 07       	cpc	r30, r24
 a24:	f9 07       	cpc	r31, r25
 a26:	c0 f0       	brcs	.+48     	; 0xa58 <__fp_cmp+0x46>
 a28:	12 16       	cp	r1, r18
 a2a:	13 06       	cpc	r1, r19
 a2c:	e4 07       	cpc	r30, r20
 a2e:	f5 07       	cpc	r31, r21
 a30:	98 f0       	brcs	.+38     	; 0xa58 <__fp_cmp+0x46>
 a32:	62 1b       	sub	r22, r18
 a34:	73 0b       	sbc	r23, r19
 a36:	84 0b       	sbc	r24, r20
 a38:	95 0b       	sbc	r25, r21
 a3a:	39 f4       	brne	.+14     	; 0xa4a <__fp_cmp+0x38>
 a3c:	0a 26       	eor	r0, r26
 a3e:	61 f0       	breq	.+24     	; 0xa58 <__fp_cmp+0x46>
 a40:	23 2b       	or	r18, r19
 a42:	24 2b       	or	r18, r20
 a44:	25 2b       	or	r18, r21
 a46:	21 f4       	brne	.+8      	; 0xa50 <__fp_cmp+0x3e>
 a48:	08 95       	ret
 a4a:	0a 26       	eor	r0, r26
 a4c:	09 f4       	brne	.+2      	; 0xa50 <__fp_cmp+0x3e>
 a4e:	a1 40       	sbci	r26, 0x01	; 1
 a50:	a6 95       	lsr	r26
 a52:	8f ef       	ldi	r24, 0xFF	; 255
 a54:	81 1d       	adc	r24, r1
 a56:	81 1d       	adc	r24, r1
 a58:	08 95       	ret

00000a5a <__fp_inf>:
 a5a:	97 f9       	bld	r25, 7
 a5c:	9f 67       	ori	r25, 0x7F	; 127
 a5e:	80 e8       	ldi	r24, 0x80	; 128
 a60:	70 e0       	ldi	r23, 0x00	; 0
 a62:	60 e0       	ldi	r22, 0x00	; 0
 a64:	08 95       	ret

00000a66 <__fp_nan>:
 a66:	9f ef       	ldi	r25, 0xFF	; 255
 a68:	80 ec       	ldi	r24, 0xC0	; 192
 a6a:	08 95       	ret

00000a6c <__fp_negdi>:
 a6c:	90 95       	com	r25
 a6e:	80 95       	com	r24
 a70:	70 95       	com	r23
 a72:	60 95       	com	r22
 a74:	50 95       	com	r21
 a76:	40 95       	com	r20
 a78:	30 95       	com	r19
 a7a:	21 95       	neg	r18
 a7c:	3f 4f       	sbci	r19, 0xFF	; 255
 a7e:	4f 4f       	sbci	r20, 0xFF	; 255
 a80:	5f 4f       	sbci	r21, 0xFF	; 255
 a82:	6f 4f       	sbci	r22, 0xFF	; 255
 a84:	7f 4f       	sbci	r23, 0xFF	; 255
 a86:	8f 4f       	sbci	r24, 0xFF	; 255
 a88:	9f 4f       	sbci	r25, 0xFF	; 255
 a8a:	08 95       	ret

00000a8c <__fp_pscA>:
 a8c:	00 24       	eor	r0, r0
 a8e:	0a 94       	dec	r0
 a90:	16 16       	cp	r1, r22
 a92:	17 06       	cpc	r1, r23
 a94:	18 06       	cpc	r1, r24
 a96:	09 06       	cpc	r0, r25
 a98:	08 95       	ret

00000a9a <__fp_pscB>:
 a9a:	00 24       	eor	r0, r0
 a9c:	0a 94       	dec	r0
 a9e:	12 16       	cp	r1, r18
 aa0:	13 06       	cpc	r1, r19
 aa2:	14 06       	cpc	r1, r20
 aa4:	05 06       	cpc	r0, r21
 aa6:	08 95       	ret
 aa8:	de cf       	rjmp	.-68     	; 0xa66 <__fp_nan>

00000aaa <__fp_rempio2>:
 aaa:	50 d0       	rcall	.+160    	; 0xb4c <__fp_splitA>
 aac:	e8 f3       	brcs	.-6      	; 0xaa8 <__fp_pscB+0xe>
 aae:	e8 94       	clt
 ab0:	e0 e0       	ldi	r30, 0x00	; 0
 ab2:	bb 27       	eor	r27, r27
 ab4:	9f 57       	subi	r25, 0x7F	; 127
 ab6:	f0 f0       	brcs	.+60     	; 0xaf4 <__fp_rempio2+0x4a>
 ab8:	2a ed       	ldi	r18, 0xDA	; 218
 aba:	3f e0       	ldi	r19, 0x0F	; 15
 abc:	49 ec       	ldi	r20, 0xC9	; 201
 abe:	06 c0       	rjmp	.+12     	; 0xacc <__fp_rempio2+0x22>
 ac0:	ee 0f       	add	r30, r30
 ac2:	bb 0f       	add	r27, r27
 ac4:	66 1f       	adc	r22, r22
 ac6:	77 1f       	adc	r23, r23
 ac8:	88 1f       	adc	r24, r24
 aca:	28 f0       	brcs	.+10     	; 0xad6 <__fp_rempio2+0x2c>
 acc:	b2 3a       	cpi	r27, 0xA2	; 162
 ace:	62 07       	cpc	r22, r18
 ad0:	73 07       	cpc	r23, r19
 ad2:	84 07       	cpc	r24, r20
 ad4:	28 f0       	brcs	.+10     	; 0xae0 <__fp_rempio2+0x36>
 ad6:	b2 5a       	subi	r27, 0xA2	; 162
 ad8:	62 0b       	sbc	r22, r18
 ada:	73 0b       	sbc	r23, r19
 adc:	84 0b       	sbc	r24, r20
 ade:	e3 95       	inc	r30
 ae0:	9a 95       	dec	r25
 ae2:	72 f7       	brpl	.-36     	; 0xac0 <__fp_rempio2+0x16>
 ae4:	80 38       	cpi	r24, 0x80	; 128
 ae6:	30 f4       	brcc	.+12     	; 0xaf4 <__fp_rempio2+0x4a>
 ae8:	9a 95       	dec	r25
 aea:	bb 0f       	add	r27, r27
 aec:	66 1f       	adc	r22, r22
 aee:	77 1f       	adc	r23, r23
 af0:	88 1f       	adc	r24, r24
 af2:	d2 f7       	brpl	.-12     	; 0xae8 <__fp_rempio2+0x3e>
 af4:	90 48       	sbci	r25, 0x80	; 128
 af6:	f6 c0       	rjmp	.+492    	; 0xce4 <__fp_mpack_finite>

00000af8 <__fp_round>:
 af8:	09 2e       	mov	r0, r25
 afa:	03 94       	inc	r0
 afc:	00 0c       	add	r0, r0
 afe:	11 f4       	brne	.+4      	; 0xb04 <__fp_round+0xc>
 b00:	88 23       	and	r24, r24
 b02:	52 f0       	brmi	.+20     	; 0xb18 <__fp_round+0x20>
 b04:	bb 0f       	add	r27, r27
 b06:	40 f4       	brcc	.+16     	; 0xb18 <__fp_round+0x20>
 b08:	bf 2b       	or	r27, r31
 b0a:	11 f4       	brne	.+4      	; 0xb10 <__fp_round+0x18>
 b0c:	60 ff       	sbrs	r22, 0
 b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__fp_round+0x20>
 b10:	6f 5f       	subi	r22, 0xFF	; 255
 b12:	7f 4f       	sbci	r23, 0xFF	; 255
 b14:	8f 4f       	sbci	r24, 0xFF	; 255
 b16:	9f 4f       	sbci	r25, 0xFF	; 255
 b18:	08 95       	ret

00000b1a <__fp_sinus>:
 b1a:	ef 93       	push	r30
 b1c:	e0 ff       	sbrs	r30, 0
 b1e:	06 c0       	rjmp	.+12     	; 0xb2c <__fp_sinus+0x12>
 b20:	a2 ea       	ldi	r26, 0xA2	; 162
 b22:	2a ed       	ldi	r18, 0xDA	; 218
 b24:	3f e0       	ldi	r19, 0x0F	; 15
 b26:	49 ec       	ldi	r20, 0xC9	; 201
 b28:	5f eb       	ldi	r21, 0xBF	; 191
 b2a:	3e de       	rcall	.-900    	; 0x7a8 <__addsf3x>
 b2c:	e5 df       	rcall	.-54     	; 0xaf8 <__fp_round>
 b2e:	0f 90       	pop	r0
 b30:	03 94       	inc	r0
 b32:	01 fc       	sbrc	r0, 1
 b34:	90 58       	subi	r25, 0x80	; 128
 b36:	e8 e6       	ldi	r30, 0x68	; 104
 b38:	f0 e0       	ldi	r31, 0x00	; 0
 b3a:	e7 c0       	rjmp	.+462    	; 0xd0a <__fp_powsodd>

00000b3c <__fp_split3>:
 b3c:	57 fd       	sbrc	r21, 7
 b3e:	90 58       	subi	r25, 0x80	; 128
 b40:	44 0f       	add	r20, r20
 b42:	55 1f       	adc	r21, r21
 b44:	59 f0       	breq	.+22     	; 0xb5c <__fp_splitA+0x10>
 b46:	5f 3f       	cpi	r21, 0xFF	; 255
 b48:	71 f0       	breq	.+28     	; 0xb66 <__fp_splitA+0x1a>
 b4a:	47 95       	ror	r20

00000b4c <__fp_splitA>:
 b4c:	88 0f       	add	r24, r24
 b4e:	97 fb       	bst	r25, 7
 b50:	99 1f       	adc	r25, r25
 b52:	61 f0       	breq	.+24     	; 0xb6c <__fp_splitA+0x20>
 b54:	9f 3f       	cpi	r25, 0xFF	; 255
 b56:	79 f0       	breq	.+30     	; 0xb76 <__fp_splitA+0x2a>
 b58:	87 95       	ror	r24
 b5a:	08 95       	ret
 b5c:	12 16       	cp	r1, r18
 b5e:	13 06       	cpc	r1, r19
 b60:	14 06       	cpc	r1, r20
 b62:	55 1f       	adc	r21, r21
 b64:	f2 cf       	rjmp	.-28     	; 0xb4a <__fp_split3+0xe>
 b66:	46 95       	lsr	r20
 b68:	f1 df       	rcall	.-30     	; 0xb4c <__fp_splitA>
 b6a:	08 c0       	rjmp	.+16     	; 0xb7c <__fp_splitA+0x30>
 b6c:	16 16       	cp	r1, r22
 b6e:	17 06       	cpc	r1, r23
 b70:	18 06       	cpc	r1, r24
 b72:	99 1f       	adc	r25, r25
 b74:	f1 cf       	rjmp	.-30     	; 0xb58 <__fp_splitA+0xc>
 b76:	86 95       	lsr	r24
 b78:	71 05       	cpc	r23, r1
 b7a:	61 05       	cpc	r22, r1
 b7c:	08 94       	sec
 b7e:	08 95       	ret

00000b80 <__fp_zero>:
 b80:	e8 94       	clt

00000b82 <__fp_szero>:
 b82:	bb 27       	eor	r27, r27
 b84:	66 27       	eor	r22, r22
 b86:	77 27       	eor	r23, r23
 b88:	cb 01       	movw	r24, r22
 b8a:	97 f9       	bld	r25, 7
 b8c:	08 95       	ret

00000b8e <__gesf2>:
 b8e:	41 df       	rcall	.-382    	; 0xa12 <__fp_cmp>
 b90:	08 f4       	brcc	.+2      	; 0xb94 <__gesf2+0x6>
 b92:	8f ef       	ldi	r24, 0xFF	; 255
 b94:	08 95       	ret

00000b96 <__mulsf3>:
 b96:	0b d0       	rcall	.+22     	; 0xbae <__mulsf3x>
 b98:	af cf       	rjmp	.-162    	; 0xaf8 <__fp_round>
 b9a:	78 df       	rcall	.-272    	; 0xa8c <__fp_pscA>
 b9c:	28 f0       	brcs	.+10     	; 0xba8 <__mulsf3+0x12>
 b9e:	7d df       	rcall	.-262    	; 0xa9a <__fp_pscB>
 ba0:	18 f0       	brcs	.+6      	; 0xba8 <__mulsf3+0x12>
 ba2:	95 23       	and	r25, r21
 ba4:	09 f0       	breq	.+2      	; 0xba8 <__mulsf3+0x12>
 ba6:	59 cf       	rjmp	.-334    	; 0xa5a <__fp_inf>
 ba8:	5e cf       	rjmp	.-324    	; 0xa66 <__fp_nan>
 baa:	11 24       	eor	r1, r1
 bac:	ea cf       	rjmp	.-44     	; 0xb82 <__fp_szero>

00000bae <__mulsf3x>:
 bae:	c6 df       	rcall	.-116    	; 0xb3c <__fp_split3>
 bb0:	a0 f3       	brcs	.-24     	; 0xb9a <__mulsf3+0x4>

00000bb2 <__mulsf3_pse>:
 bb2:	95 9f       	mul	r25, r21
 bb4:	d1 f3       	breq	.-12     	; 0xbaa <__mulsf3+0x14>
 bb6:	95 0f       	add	r25, r21
 bb8:	50 e0       	ldi	r21, 0x00	; 0
 bba:	55 1f       	adc	r21, r21
 bbc:	62 9f       	mul	r22, r18
 bbe:	f0 01       	movw	r30, r0
 bc0:	72 9f       	mul	r23, r18
 bc2:	bb 27       	eor	r27, r27
 bc4:	f0 0d       	add	r31, r0
 bc6:	b1 1d       	adc	r27, r1
 bc8:	63 9f       	mul	r22, r19
 bca:	aa 27       	eor	r26, r26
 bcc:	f0 0d       	add	r31, r0
 bce:	b1 1d       	adc	r27, r1
 bd0:	aa 1f       	adc	r26, r26
 bd2:	64 9f       	mul	r22, r20
 bd4:	66 27       	eor	r22, r22
 bd6:	b0 0d       	add	r27, r0
 bd8:	a1 1d       	adc	r26, r1
 bda:	66 1f       	adc	r22, r22
 bdc:	82 9f       	mul	r24, r18
 bde:	22 27       	eor	r18, r18
 be0:	b0 0d       	add	r27, r0
 be2:	a1 1d       	adc	r26, r1
 be4:	62 1f       	adc	r22, r18
 be6:	73 9f       	mul	r23, r19
 be8:	b0 0d       	add	r27, r0
 bea:	a1 1d       	adc	r26, r1
 bec:	62 1f       	adc	r22, r18
 bee:	83 9f       	mul	r24, r19
 bf0:	a0 0d       	add	r26, r0
 bf2:	61 1d       	adc	r22, r1
 bf4:	22 1f       	adc	r18, r18
 bf6:	74 9f       	mul	r23, r20
 bf8:	33 27       	eor	r19, r19
 bfa:	a0 0d       	add	r26, r0
 bfc:	61 1d       	adc	r22, r1
 bfe:	23 1f       	adc	r18, r19
 c00:	84 9f       	mul	r24, r20
 c02:	60 0d       	add	r22, r0
 c04:	21 1d       	adc	r18, r1
 c06:	82 2f       	mov	r24, r18
 c08:	76 2f       	mov	r23, r22
 c0a:	6a 2f       	mov	r22, r26
 c0c:	11 24       	eor	r1, r1
 c0e:	9f 57       	subi	r25, 0x7F	; 127
 c10:	50 40       	sbci	r21, 0x00	; 0
 c12:	8a f0       	brmi	.+34     	; 0xc36 <__mulsf3_pse+0x84>
 c14:	e1 f0       	breq	.+56     	; 0xc4e <__mulsf3_pse+0x9c>
 c16:	88 23       	and	r24, r24
 c18:	4a f0       	brmi	.+18     	; 0xc2c <__mulsf3_pse+0x7a>
 c1a:	ee 0f       	add	r30, r30
 c1c:	ff 1f       	adc	r31, r31
 c1e:	bb 1f       	adc	r27, r27
 c20:	66 1f       	adc	r22, r22
 c22:	77 1f       	adc	r23, r23
 c24:	88 1f       	adc	r24, r24
 c26:	91 50       	subi	r25, 0x01	; 1
 c28:	50 40       	sbci	r21, 0x00	; 0
 c2a:	a9 f7       	brne	.-22     	; 0xc16 <__mulsf3_pse+0x64>
 c2c:	9e 3f       	cpi	r25, 0xFE	; 254
 c2e:	51 05       	cpc	r21, r1
 c30:	70 f0       	brcs	.+28     	; 0xc4e <__mulsf3_pse+0x9c>
 c32:	13 cf       	rjmp	.-474    	; 0xa5a <__fp_inf>
 c34:	a6 cf       	rjmp	.-180    	; 0xb82 <__fp_szero>
 c36:	5f 3f       	cpi	r21, 0xFF	; 255
 c38:	ec f3       	brlt	.-6      	; 0xc34 <__mulsf3_pse+0x82>
 c3a:	98 3e       	cpi	r25, 0xE8	; 232
 c3c:	dc f3       	brlt	.-10     	; 0xc34 <__mulsf3_pse+0x82>
 c3e:	86 95       	lsr	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	b7 95       	ror	r27
 c46:	f7 95       	ror	r31
 c48:	e7 95       	ror	r30
 c4a:	9f 5f       	subi	r25, 0xFF	; 255
 c4c:	c1 f7       	brne	.-16     	; 0xc3e <__mulsf3_pse+0x8c>
 c4e:	fe 2b       	or	r31, r30
 c50:	88 0f       	add	r24, r24
 c52:	91 1d       	adc	r25, r1
 c54:	96 95       	lsr	r25
 c56:	87 95       	ror	r24
 c58:	97 f9       	bld	r25, 7
 c5a:	08 95       	ret
 c5c:	11 f4       	brne	.+4      	; 0xc62 <__mulsf3_pse+0xb0>
 c5e:	0e f4       	brtc	.+2      	; 0xc62 <__mulsf3_pse+0xb0>
 c60:	02 cf       	rjmp	.-508    	; 0xa66 <__fp_nan>
 c62:	3e c0       	rjmp	.+124    	; 0xce0 <__fp_mpack>

00000c64 <sqrt>:
 c64:	73 df       	rcall	.-282    	; 0xb4c <__fp_splitA>
 c66:	d0 f3       	brcs	.-12     	; 0xc5c <__mulsf3_pse+0xaa>
 c68:	99 23       	and	r25, r25
 c6a:	d9 f3       	breq	.-10     	; 0xc62 <__mulsf3_pse+0xb0>
 c6c:	ce f3       	brts	.-14     	; 0xc60 <__mulsf3_pse+0xae>
 c6e:	9f 57       	subi	r25, 0x7F	; 127
 c70:	55 0b       	sbc	r21, r21
 c72:	87 ff       	sbrs	r24, 7
 c74:	43 d0       	rcall	.+134    	; 0xcfc <__fp_norm2>
 c76:	00 24       	eor	r0, r0
 c78:	a0 e6       	ldi	r26, 0x60	; 96
 c7a:	40 ea       	ldi	r20, 0xA0	; 160
 c7c:	90 01       	movw	r18, r0
 c7e:	80 58       	subi	r24, 0x80	; 128
 c80:	56 95       	lsr	r21
 c82:	97 95       	ror	r25
 c84:	28 f4       	brcc	.+10     	; 0xc90 <sqrt+0x2c>
 c86:	80 5c       	subi	r24, 0xC0	; 192
 c88:	66 0f       	add	r22, r22
 c8a:	77 1f       	adc	r23, r23
 c8c:	88 1f       	adc	r24, r24
 c8e:	20 f0       	brcs	.+8      	; 0xc98 <sqrt+0x34>
 c90:	26 17       	cp	r18, r22
 c92:	37 07       	cpc	r19, r23
 c94:	48 07       	cpc	r20, r24
 c96:	30 f4       	brcc	.+12     	; 0xca4 <sqrt+0x40>
 c98:	62 1b       	sub	r22, r18
 c9a:	73 0b       	sbc	r23, r19
 c9c:	84 0b       	sbc	r24, r20
 c9e:	20 29       	or	r18, r0
 ca0:	31 29       	or	r19, r1
 ca2:	4a 2b       	or	r20, r26
 ca4:	a6 95       	lsr	r26
 ca6:	17 94       	ror	r1
 ca8:	07 94       	ror	r0
 caa:	20 25       	eor	r18, r0
 cac:	31 25       	eor	r19, r1
 cae:	4a 27       	eor	r20, r26
 cb0:	58 f7       	brcc	.-42     	; 0xc88 <sqrt+0x24>
 cb2:	66 0f       	add	r22, r22
 cb4:	77 1f       	adc	r23, r23
 cb6:	88 1f       	adc	r24, r24
 cb8:	20 f0       	brcs	.+8      	; 0xcc2 <sqrt+0x5e>
 cba:	26 17       	cp	r18, r22
 cbc:	37 07       	cpc	r19, r23
 cbe:	48 07       	cpc	r20, r24
 cc0:	30 f4       	brcc	.+12     	; 0xcce <sqrt+0x6a>
 cc2:	62 0b       	sbc	r22, r18
 cc4:	73 0b       	sbc	r23, r19
 cc6:	84 0b       	sbc	r24, r20
 cc8:	20 0d       	add	r18, r0
 cca:	31 1d       	adc	r19, r1
 ccc:	41 1d       	adc	r20, r1
 cce:	a0 95       	com	r26
 cd0:	81 f7       	brne	.-32     	; 0xcb2 <sqrt+0x4e>
 cd2:	b9 01       	movw	r22, r18
 cd4:	84 2f       	mov	r24, r20
 cd6:	91 58       	subi	r25, 0x81	; 129
 cd8:	88 0f       	add	r24, r24
 cda:	96 95       	lsr	r25
 cdc:	87 95       	ror	r24
 cde:	08 95       	ret

00000ce0 <__fp_mpack>:
 ce0:	9f 3f       	cpi	r25, 0xFF	; 255
 ce2:	31 f0       	breq	.+12     	; 0xcf0 <__fp_mpack_finite+0xc>

00000ce4 <__fp_mpack_finite>:
 ce4:	91 50       	subi	r25, 0x01	; 1
 ce6:	20 f4       	brcc	.+8      	; 0xcf0 <__fp_mpack_finite+0xc>
 ce8:	87 95       	ror	r24
 cea:	77 95       	ror	r23
 cec:	67 95       	ror	r22
 cee:	b7 95       	ror	r27
 cf0:	88 0f       	add	r24, r24
 cf2:	91 1d       	adc	r25, r1
 cf4:	96 95       	lsr	r25
 cf6:	87 95       	ror	r24
 cf8:	97 f9       	bld	r25, 7
 cfa:	08 95       	ret

00000cfc <__fp_norm2>:
 cfc:	91 50       	subi	r25, 0x01	; 1
 cfe:	50 40       	sbci	r21, 0x00	; 0
 d00:	66 0f       	add	r22, r22
 d02:	77 1f       	adc	r23, r23
 d04:	88 1f       	adc	r24, r24
 d06:	d2 f7       	brpl	.-12     	; 0xcfc <__fp_norm2>
 d08:	08 95       	ret

00000d0a <__fp_powsodd>:
 d0a:	9f 93       	push	r25
 d0c:	8f 93       	push	r24
 d0e:	7f 93       	push	r23
 d10:	6f 93       	push	r22
 d12:	ff 93       	push	r31
 d14:	ef 93       	push	r30
 d16:	9b 01       	movw	r18, r22
 d18:	ac 01       	movw	r20, r24
 d1a:	3d df       	rcall	.-390    	; 0xb96 <__mulsf3>
 d1c:	ef 91       	pop	r30
 d1e:	ff 91       	pop	r31
 d20:	05 d0       	rcall	.+10     	; 0xd2c <__fp_powser>
 d22:	2f 91       	pop	r18
 d24:	3f 91       	pop	r19
 d26:	4f 91       	pop	r20
 d28:	5f 91       	pop	r21
 d2a:	35 cf       	rjmp	.-406    	; 0xb96 <__mulsf3>

00000d2c <__fp_powser>:
 d2c:	df 93       	push	r29
 d2e:	cf 93       	push	r28
 d30:	1f 93       	push	r17
 d32:	0f 93       	push	r16
 d34:	ff 92       	push	r15
 d36:	ef 92       	push	r14
 d38:	df 92       	push	r13
 d3a:	7b 01       	movw	r14, r22
 d3c:	8c 01       	movw	r16, r24
 d3e:	68 94       	set
 d40:	05 c0       	rjmp	.+10     	; 0xd4c <__fp_powser+0x20>
 d42:	da 2e       	mov	r13, r26
 d44:	ef 01       	movw	r28, r30
 d46:	33 df       	rcall	.-410    	; 0xbae <__mulsf3x>
 d48:	fe 01       	movw	r30, r28
 d4a:	e8 94       	clt
 d4c:	a5 91       	lpm	r26, Z+
 d4e:	25 91       	lpm	r18, Z+
 d50:	35 91       	lpm	r19, Z+
 d52:	45 91       	lpm	r20, Z+
 d54:	55 91       	lpm	r21, Z+
 d56:	ae f3       	brts	.-22     	; 0xd42 <__fp_powser+0x16>
 d58:	ef 01       	movw	r28, r30
 d5a:	26 dd       	rcall	.-1460   	; 0x7a8 <__addsf3x>
 d5c:	fe 01       	movw	r30, r28
 d5e:	97 01       	movw	r18, r14
 d60:	a8 01       	movw	r20, r16
 d62:	da 94       	dec	r13
 d64:	79 f7       	brne	.-34     	; 0xd44 <__fp_powser+0x18>
 d66:	df 90       	pop	r13
 d68:	ef 90       	pop	r14
 d6a:	ff 90       	pop	r15
 d6c:	0f 91       	pop	r16
 d6e:	1f 91       	pop	r17
 d70:	cf 91       	pop	r28
 d72:	df 91       	pop	r29
 d74:	08 95       	ret

00000d76 <itoa>:
 d76:	fb 01       	movw	r30, r22
 d78:	9f 01       	movw	r18, r30
 d7a:	e8 94       	clt
 d7c:	42 30       	cpi	r20, 0x02	; 2
 d7e:	c4 f0       	brlt	.+48     	; 0xdb0 <itoa+0x3a>
 d80:	45 32       	cpi	r20, 0x25	; 37
 d82:	b4 f4       	brge	.+44     	; 0xdb0 <itoa+0x3a>
 d84:	4a 30       	cpi	r20, 0x0A	; 10
 d86:	29 f4       	brne	.+10     	; 0xd92 <itoa+0x1c>
 d88:	97 fb       	bst	r25, 7
 d8a:	1e f4       	brtc	.+6      	; 0xd92 <itoa+0x1c>
 d8c:	90 95       	com	r25
 d8e:	81 95       	neg	r24
 d90:	9f 4f       	sbci	r25, 0xFF	; 255
 d92:	64 2f       	mov	r22, r20
 d94:	77 27       	eor	r23, r23
 d96:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__udivmodhi4>
 d9a:	80 5d       	subi	r24, 0xD0	; 208
 d9c:	8a 33       	cpi	r24, 0x3A	; 58
 d9e:	0c f0       	brlt	.+2      	; 0xda2 <itoa+0x2c>
 da0:	89 5d       	subi	r24, 0xD9	; 217
 da2:	81 93       	st	Z+, r24
 da4:	cb 01       	movw	r24, r22
 da6:	00 97       	sbiw	r24, 0x00	; 0
 da8:	a1 f7       	brne	.-24     	; 0xd92 <itoa+0x1c>
 daa:	16 f4       	brtc	.+4      	; 0xdb0 <itoa+0x3a>
 dac:	5d e2       	ldi	r21, 0x2D	; 45
 dae:	51 93       	st	Z+, r21
 db0:	10 82       	st	Z, r1
 db2:	c9 01       	movw	r24, r18
 db4:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <strrev>

00000db8 <strrev>:
 db8:	dc 01       	movw	r26, r24
 dba:	fc 01       	movw	r30, r24
 dbc:	67 2f       	mov	r22, r23
 dbe:	71 91       	ld	r23, Z+
 dc0:	77 23       	and	r23, r23
 dc2:	e1 f7       	brne	.-8      	; 0xdbc <strrev+0x4>
 dc4:	32 97       	sbiw	r30, 0x02	; 2
 dc6:	04 c0       	rjmp	.+8      	; 0xdd0 <strrev+0x18>
 dc8:	7c 91       	ld	r23, X
 dca:	6d 93       	st	X+, r22
 dcc:	70 83       	st	Z, r23
 dce:	62 91       	ld	r22, -Z
 dd0:	ae 17       	cp	r26, r30
 dd2:	bf 07       	cpc	r27, r31
 dd4:	c8 f3       	brcs	.-14     	; 0xdc8 <strrev+0x10>
 dd6:	08 95       	ret

00000dd8 <__udivmodhi4>:
 dd8:	aa 1b       	sub	r26, r26
 dda:	bb 1b       	sub	r27, r27
 ddc:	51 e1       	ldi	r21, 0x11	; 17
 dde:	07 c0       	rjmp	.+14     	; 0xdee <__udivmodhi4_ep>

00000de0 <__udivmodhi4_loop>:
 de0:	aa 1f       	adc	r26, r26
 de2:	bb 1f       	adc	r27, r27
 de4:	a6 17       	cp	r26, r22
 de6:	b7 07       	cpc	r27, r23
 de8:	10 f0       	brcs	.+4      	; 0xdee <__udivmodhi4_ep>
 dea:	a6 1b       	sub	r26, r22
 dec:	b7 0b       	sbc	r27, r23

00000dee <__udivmodhi4_ep>:
 dee:	88 1f       	adc	r24, r24
 df0:	99 1f       	adc	r25, r25
 df2:	5a 95       	dec	r21
 df4:	a9 f7       	brne	.-22     	; 0xde0 <__udivmodhi4_loop>
 df6:	80 95       	com	r24
 df8:	90 95       	com	r25
 dfa:	bc 01       	movw	r22, r24
 dfc:	cd 01       	movw	r24, r26
 dfe:	08 95       	ret

00000e00 <_exit>:
 e00:	f8 94       	cli

00000e02 <__stop_program>:
 e02:	ff cf       	rjmp	.-2      	; 0xe02 <__stop_program>
